
FINAL_PROJECT_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000409c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000078  080043a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080043a0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007122  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001747  00000000  00000000  000271ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  00028918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00028f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016be6  00000000  00000000  00029530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081c5  00000000  00000000  00040116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6ca  00000000  00000000  000482db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d79a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d44  00000000  00000000  000d79f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004224 	.word	0x08004224

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004224 	.word	0x08004224

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b974 	b.w	8000bfc <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	4604      	mov	r4, r0
 8000934:	468e      	mov	lr, r1
 8000936:	2b00      	cmp	r3, #0
 8000938:	d14d      	bne.n	80009d6 <__udivmoddi4+0xaa>
 800093a:	428a      	cmp	r2, r1
 800093c:	4694      	mov	ip, r2
 800093e:	d969      	bls.n	8000a14 <__udivmoddi4+0xe8>
 8000940:	fab2 f282 	clz	r2, r2
 8000944:	b152      	cbz	r2, 800095c <__udivmoddi4+0x30>
 8000946:	fa01 f302 	lsl.w	r3, r1, r2
 800094a:	f1c2 0120 	rsb	r1, r2, #32
 800094e:	fa20 f101 	lsr.w	r1, r0, r1
 8000952:	fa0c fc02 	lsl.w	ip, ip, r2
 8000956:	ea41 0e03 	orr.w	lr, r1, r3
 800095a:	4094      	lsls	r4, r2
 800095c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000960:	0c21      	lsrs	r1, r4, #16
 8000962:	fbbe f6f8 	udiv	r6, lr, r8
 8000966:	fa1f f78c 	uxth.w	r7, ip
 800096a:	fb08 e316 	mls	r3, r8, r6, lr
 800096e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000972:	fb06 f107 	mul.w	r1, r6, r7
 8000976:	4299      	cmp	r1, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x64>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000982:	f080 811f 	bcs.w	8000bc4 <__udivmoddi4+0x298>
 8000986:	4299      	cmp	r1, r3
 8000988:	f240 811c 	bls.w	8000bc4 <__udivmoddi4+0x298>
 800098c:	3e02      	subs	r6, #2
 800098e:	4463      	add	r3, ip
 8000990:	1a5b      	subs	r3, r3, r1
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb3 f0f8 	udiv	r0, r3, r8
 8000998:	fb08 3310 	mls	r3, r8, r0, r3
 800099c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009a0:	fb00 f707 	mul.w	r7, r0, r7
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	d90a      	bls.n	80009be <__udivmoddi4+0x92>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80009b0:	f080 810a 	bcs.w	8000bc8 <__udivmoddi4+0x29c>
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	f240 8107 	bls.w	8000bc8 <__udivmoddi4+0x29c>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009c2:	1be4      	subs	r4, r4, r7
 80009c4:	2600      	movs	r6, #0
 80009c6:	b11d      	cbz	r5, 80009d0 <__udivmoddi4+0xa4>
 80009c8:	40d4      	lsrs	r4, r2
 80009ca:	2300      	movs	r3, #0
 80009cc:	e9c5 4300 	strd	r4, r3, [r5]
 80009d0:	4631      	mov	r1, r6
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d909      	bls.n	80009ee <__udivmoddi4+0xc2>
 80009da:	2d00      	cmp	r5, #0
 80009dc:	f000 80ef 	beq.w	8000bbe <__udivmoddi4+0x292>
 80009e0:	2600      	movs	r6, #0
 80009e2:	e9c5 0100 	strd	r0, r1, [r5]
 80009e6:	4630      	mov	r0, r6
 80009e8:	4631      	mov	r1, r6
 80009ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ee:	fab3 f683 	clz	r6, r3
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d14a      	bne.n	8000a8c <__udivmoddi4+0x160>
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d302      	bcc.n	8000a00 <__udivmoddi4+0xd4>
 80009fa:	4282      	cmp	r2, r0
 80009fc:	f200 80f9 	bhi.w	8000bf2 <__udivmoddi4+0x2c6>
 8000a00:	1a84      	subs	r4, r0, r2
 8000a02:	eb61 0303 	sbc.w	r3, r1, r3
 8000a06:	2001      	movs	r0, #1
 8000a08:	469e      	mov	lr, r3
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d0e0      	beq.n	80009d0 <__udivmoddi4+0xa4>
 8000a0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a12:	e7dd      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000a14:	b902      	cbnz	r2, 8000a18 <__udivmoddi4+0xec>
 8000a16:	deff      	udf	#255	; 0xff
 8000a18:	fab2 f282 	clz	r2, r2
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	f040 8092 	bne.w	8000b46 <__udivmoddi4+0x21a>
 8000a22:	eba1 010c 	sub.w	r1, r1, ip
 8000a26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2a:	fa1f fe8c 	uxth.w	lr, ip
 8000a2e:	2601      	movs	r6, #1
 8000a30:	0c20      	lsrs	r0, r4, #16
 8000a32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a36:	fb07 1113 	mls	r1, r7, r3, r1
 8000a3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a3e:	fb0e f003 	mul.w	r0, lr, r3
 8000a42:	4288      	cmp	r0, r1
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x12c>
 8000a46:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a4e:	d202      	bcs.n	8000a56 <__udivmoddi4+0x12a>
 8000a50:	4288      	cmp	r0, r1
 8000a52:	f200 80cb 	bhi.w	8000bec <__udivmoddi4+0x2c0>
 8000a56:	4643      	mov	r3, r8
 8000a58:	1a09      	subs	r1, r1, r0
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a60:	fb07 1110 	mls	r1, r7, r0, r1
 8000a64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a68:	fb0e fe00 	mul.w	lr, lr, r0
 8000a6c:	45a6      	cmp	lr, r4
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x156>
 8000a70:	eb1c 0404 	adds.w	r4, ip, r4
 8000a74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a78:	d202      	bcs.n	8000a80 <__udivmoddi4+0x154>
 8000a7a:	45a6      	cmp	lr, r4
 8000a7c:	f200 80bb 	bhi.w	8000bf6 <__udivmoddi4+0x2ca>
 8000a80:	4608      	mov	r0, r1
 8000a82:	eba4 040e 	sub.w	r4, r4, lr
 8000a86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a8a:	e79c      	b.n	80009c6 <__udivmoddi4+0x9a>
 8000a8c:	f1c6 0720 	rsb	r7, r6, #32
 8000a90:	40b3      	lsls	r3, r6
 8000a92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	40f9      	lsrs	r1, r7
 8000aa6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aaa:	fa00 f306 	lsl.w	r3, r0, r6
 8000aae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ab2:	0c20      	lsrs	r0, r4, #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fb09 1118 	mls	r1, r9, r8, r1
 8000abc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ac0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ac4:	4288      	cmp	r0, r1
 8000ac6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aca:	d90b      	bls.n	8000ae4 <__udivmoddi4+0x1b8>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ad4:	f080 8088 	bcs.w	8000be8 <__udivmoddi4+0x2bc>
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	f240 8085 	bls.w	8000be8 <__udivmoddi4+0x2bc>
 8000ade:	f1a8 0802 	sub.w	r8, r8, #2
 8000ae2:	4461      	add	r1, ip
 8000ae4:	1a09      	subs	r1, r1, r0
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000aec:	fb09 1110 	mls	r1, r9, r0, r1
 8000af0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000af4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af8:	458e      	cmp	lr, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x1e2>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b04:	d26c      	bcs.n	8000be0 <__udivmoddi4+0x2b4>
 8000b06:	458e      	cmp	lr, r1
 8000b08:	d96a      	bls.n	8000be0 <__udivmoddi4+0x2b4>
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b12:	fba0 9402 	umull	r9, r4, r0, r2
 8000b16:	eba1 010e 	sub.w	r1, r1, lr
 8000b1a:	42a1      	cmp	r1, r4
 8000b1c:	46c8      	mov	r8, r9
 8000b1e:	46a6      	mov	lr, r4
 8000b20:	d356      	bcc.n	8000bd0 <__udivmoddi4+0x2a4>
 8000b22:	d053      	beq.n	8000bcc <__udivmoddi4+0x2a0>
 8000b24:	b15d      	cbz	r5, 8000b3e <__udivmoddi4+0x212>
 8000b26:	ebb3 0208 	subs.w	r2, r3, r8
 8000b2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b32:	fa22 f306 	lsr.w	r3, r2, r6
 8000b36:	40f1      	lsrs	r1, r6
 8000b38:	431f      	orrs	r7, r3
 8000b3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b3e:	2600      	movs	r6, #0
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	40d8      	lsrs	r0, r3
 8000b4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b50:	fa21 f303 	lsr.w	r3, r1, r3
 8000b54:	4091      	lsls	r1, r2
 8000b56:	4301      	orrs	r1, r0
 8000b58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b64:	fb07 3610 	mls	r6, r7, r0, r3
 8000b68:	0c0b      	lsrs	r3, r1, #16
 8000b6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b72:	429e      	cmp	r6, r3
 8000b74:	fa04 f402 	lsl.w	r4, r4, r2
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x260>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b82:	d22f      	bcs.n	8000be4 <__udivmoddi4+0x2b8>
 8000b84:	429e      	cmp	r6, r3
 8000b86:	d92d      	bls.n	8000be4 <__udivmoddi4+0x2b8>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	1b9b      	subs	r3, r3, r6
 8000b8e:	b289      	uxth	r1, r1
 8000b90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b94:	fb07 3316 	mls	r3, r7, r6, r3
 8000b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x28a>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bac:	d216      	bcs.n	8000bdc <__udivmoddi4+0x2b0>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d914      	bls.n	8000bdc <__udivmoddi4+0x2b0>
 8000bb2:	3e02      	subs	r6, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	1ac9      	subs	r1, r1, r3
 8000bb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bbc:	e738      	b.n	8000a30 <__udivmoddi4+0x104>
 8000bbe:	462e      	mov	r6, r5
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	e705      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000bc4:	4606      	mov	r6, r0
 8000bc6:	e6e3      	b.n	8000990 <__udivmoddi4+0x64>
 8000bc8:	4618      	mov	r0, r3
 8000bca:	e6f8      	b.n	80009be <__udivmoddi4+0x92>
 8000bcc:	454b      	cmp	r3, r9
 8000bce:	d2a9      	bcs.n	8000b24 <__udivmoddi4+0x1f8>
 8000bd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bd8:	3801      	subs	r0, #1
 8000bda:	e7a3      	b.n	8000b24 <__udivmoddi4+0x1f8>
 8000bdc:	4646      	mov	r6, r8
 8000bde:	e7ea      	b.n	8000bb6 <__udivmoddi4+0x28a>
 8000be0:	4620      	mov	r0, r4
 8000be2:	e794      	b.n	8000b0e <__udivmoddi4+0x1e2>
 8000be4:	4640      	mov	r0, r8
 8000be6:	e7d1      	b.n	8000b8c <__udivmoddi4+0x260>
 8000be8:	46d0      	mov	r8, sl
 8000bea:	e77b      	b.n	8000ae4 <__udivmoddi4+0x1b8>
 8000bec:	3b02      	subs	r3, #2
 8000bee:	4461      	add	r1, ip
 8000bf0:	e732      	b.n	8000a58 <__udivmoddi4+0x12c>
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	e709      	b.n	8000a0a <__udivmoddi4+0xde>
 8000bf6:	4464      	add	r4, ip
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	e742      	b.n	8000a82 <__udivmoddi4+0x156>

08000bfc <__aeabi_idiv0>:
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000c0e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000c12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000c16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c1a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c1e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000c20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c22:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f80e 	bl	8000c56 <Lcd_init>

	return lcd;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	461d      	mov	r5, r3
 8000c3e:	f107 0410 	add.w	r4, r7, #16
 8000c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c4a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bdb0      	pop	{r4, r5, r7, pc}

08000c56 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7d9b      	ldrb	r3, [r3, #22]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10c      	bne.n	8000c80 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000c66:	2133      	movs	r1, #51	; 0x33
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 f87b 	bl	8000d64 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000c6e:	2132      	movs	r1, #50	; 0x32
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f877 	bl	8000d64 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000c76:	2128      	movs	r1, #40	; 0x28
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f873 	bl	8000d64 <lcd_write_command>
 8000c7e:	e003      	b.n	8000c88 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000c80:	2138      	movs	r1, #56	; 0x38
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 f86e 	bl	8000d64 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000c88:	2101      	movs	r1, #1
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f86a 	bl	8000d64 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000c90:	210c      	movs	r1, #12
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f866 	bl	8000d64 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000c98:	2106      	movs	r1, #6
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 f862 	bl	8000d64 <lcd_write_command>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4906      	ldr	r1, [pc, #24]	; (8000cd4 <Lcd_int+0x2c>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fe44 	bl	8003948 <siprintf>

	Lcd_string(lcd, buffer);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f806 	bl	8000cd8 <Lcd_string>
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	0800423c 	.word	0x0800423c

08000cd8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e00a      	b.n	8000cfe <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f864 	bl	8000dc0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	7bfc      	ldrb	r4, [r7, #15]
 8000d00:	6838      	ldr	r0, [r7, #0]
 8000d02:	f7ff fa6d 	bl	80001e0 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d3ed      	bcc.n	8000ce8 <Lcd_string+0x10>
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd90      	pop	{r4, r7, pc}
	...

08000d18 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
 8000d24:	4613      	mov	r3, r2
 8000d26:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <Lcd_cursor+0x30>)
 8000d2c:	5cd2      	ldrb	r2, [r2, r3]
 8000d2e:	78bb      	ldrb	r3, [r7, #2]
 8000d30:	4413      	add	r3, r2
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	3b80      	subs	r3, #128	; 0x80
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f812 	bl	8000d64 <lcd_write_command>
	#endif
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	080042d0 	.word	0x080042d0

08000d4c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000d54:	2101      	movs	r1, #1
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f804 	bl	8000d64 <lcd_write_command>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6898      	ldr	r0, [r3, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	899b      	ldrh	r3, [r3, #12]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f002 f934 	bl	8002fe8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7d9b      	ldrb	r3, [r3, #22]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d111      	bne.n	8000dac <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2204      	movs	r2, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f842 	bl	8000e1c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2204      	movs	r2, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f839 	bl	8000e1c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000daa:	e005      	b.n	8000db8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	2208      	movs	r2, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f832 	bl	8000e1c <lcd_write>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6898      	ldr	r0, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	899b      	ldrh	r3, [r3, #12]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f002 f906 	bl	8002fe8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7d9b      	ldrb	r3, [r3, #22]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d111      	bne.n	8000e08 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2204      	movs	r2, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f814 	bl	8000e1c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f80b 	bl	8000e1c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000e06:	e005      	b.n	8000e14 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f804 	bl	8000e1c <lcd_write>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e019      	b.n	8000e66 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	8819      	ldrh	r1, [r3, #0]
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	fa42 f303 	asr.w	r3, r2, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f002 f8c4 	bl	8002fe8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	3301      	adds	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	7bfa      	ldrb	r2, [r7, #15]
 8000e68:	78bb      	ldrb	r3, [r7, #2]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d3e1      	bcc.n	8000e32 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6918      	ldr	r0, [r3, #16]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	8a9b      	ldrh	r3, [r3, #20]
 8000e76:	2201      	movs	r2, #1
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f002 f8b5 	bl	8002fe8 <HAL_GPIO_WritePin>
	DELAY(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 f9b8 	bl	80021f4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6918      	ldr	r0, [r3, #16]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	8a9b      	ldrh	r3, [r3, #20]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f002 f8aa 	bl	8002fe8 <HAL_GPIO_WritePin>
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0c      	blt.n	8000f04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_ClearPendingIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	3360      	adds	r3, #96	; 0x60
 8000f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <EXTI9_5_IRQHandler>:
/* USER CODE BEGIN PFP */
void EmergencyStop(void);
void start(void);
void velocities(void);

void EXTI9_5_IRQHandler(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  if(EXTI->PR & (0x01 << 5)){
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <EXTI9_5_IRQHandler+0xac>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d019      	beq.n	8000fac <EXTI9_5_IRQHandler+0x44>
    NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000f78:	2017      	movs	r0, #23
 8000f7a:	f7ff ffad 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
    if(velocity<3)
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	dc05      	bgt.n	8000f92 <EXTI9_5_IRQHandler+0x2a>
    velocity++;
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a22      	ldr	r2, [pc, #136]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e006      	b.n	8000fa0 <EXTI9_5_IRQHandler+0x38>
    else if (velocity>=3)
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	dd02      	ble.n	8000fa0 <EXTI9_5_IRQHandler+0x38>
    	velocity=3;
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	601a      	str	r2, [r3, #0]
    EXTI->PR |= (0x01 << 5); // Clear the EXTI pending register
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <EXTI9_5_IRQHandler+0xac>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <EXTI9_5_IRQHandler+0xac>)
 8000fa6:	f043 0320 	orr.w	r3, r3, #32
 8000faa:	6153      	str	r3, [r2, #20]
  }
  if(EXTI->PR & (0x01 << 6)){
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <EXTI9_5_IRQHandler+0xac>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d019      	beq.n	8000fec <EXTI9_5_IRQHandler+0x84>
      NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000fb8:	2017      	movs	r0, #23
 8000fba:	f7ff ff8d 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
      if(velocity>0)
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	dd05      	ble.n	8000fd2 <EXTI9_5_IRQHandler+0x6a>
         velocity--;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	4a12      	ldr	r2, [pc, #72]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	e006      	b.n	8000fe0 <EXTI9_5_IRQHandler+0x78>
         else if (velocity<1)
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	dc02      	bgt.n	8000fe0 <EXTI9_5_IRQHandler+0x78>
         	velocity = 0;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <EXTI9_5_IRQHandler+0xb0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
      EXTI->PR |= (0x01 << 6); // Clear the EXTI pending register
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <EXTI9_5_IRQHandler+0xac>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <EXTI9_5_IRQHandler+0xac>)
 8000fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fea:	6153      	str	r3, [r2, #20]
    }
  if(EXTI->PR & (0x01 << 7)){
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <EXTI9_5_IRQHandler+0xac>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00b      	beq.n	8001010 <EXTI9_5_IRQHandler+0xa8>
      NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000ff8:	2017      	movs	r0, #23
 8000ffa:	f7ff ff6d 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
      emergency = 1;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <EXTI9_5_IRQHandler+0xb4>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
      EXTI->PR |= (0x01 << 6); // Clear the EXTI pending register
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <EXTI9_5_IRQHandler+0xac>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	4a02      	ldr	r2, [pc, #8]	; (8001014 <EXTI9_5_IRQHandler+0xac>)
 800100a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100e:	6153      	str	r3, [r2, #20]
    }
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40013c00 	.word	0x40013c00
 8001018:	20000108 	.word	0x20000108
 800101c:	20000104 	.word	0x20000104

08001020 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
			// GPIOC2
    NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8001024:	2008      	movs	r0, #8
 8001026:	f7ff ff57 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
    c_p++;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <EXTI2_IRQHandler+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <EXTI2_IRQHandler+0x24>)
 8001032:	6013      	str	r3, [r2, #0]

    EXTI->PR |= (0x01 << 2); 				// Clear the EXTI pending register
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <EXTI2_IRQHandler+0x28>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	4a03      	ldr	r2, [pc, #12]	; (8001048 <EXTI2_IRQHandler+0x28>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6153      	str	r3, [r2, #20]
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000110 	.word	0x20000110
 8001048:	40013c00 	.word	0x40013c00

0800104c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  if(EXTI->PR & (0x01 << 15)){				// GPIOC13 - button
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <EXTI15_10_IRQHandler+0x30>)
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00d      	beq.n	8001078 <EXTI15_10_IRQHandler+0x2c>
    NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800105c:	2028      	movs	r0, #40	; 0x28
 800105e:	f7ff ff3b 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
    c_p++;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <EXTI15_10_IRQHandler+0x34>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <EXTI15_10_IRQHandler+0x34>)
 800106a:	6013      	str	r3, [r2, #0]
    EXTI->PR |= (0x01 << 15); 				// Clear the EXTI pending register
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <EXTI15_10_IRQHandler+0x30>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	4a02      	ldr	r2, [pc, #8]	; (800107c <EXTI15_10_IRQHandler+0x30>)
 8001072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001076:	6153      	str	r3, [r2, #20]
  }
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40013c00 	.word	0x40013c00
 8001080:	20000110 	.word	0x20000110

08001084 <TIM2_IRQHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TIM2_IRQHandler(void){					// Encoder check
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TIM2_IRQn);
 8001088:	201c      	movs	r0, #28
 800108a:	f7ff ff25 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
	TIM2->SR= (uint16_t)(~(1 << 0));
 800108e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001092:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001096:	611a      	str	r2, [r3, #16]
	c=c_p/3;									// storing the number of pulses
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <TIM2_IRQHandler+0x38>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <TIM2_IRQHandler+0x3c>)
 800109e:	fb82 1203 	smull	r1, r2, r2, r3
 80010a2:	17db      	asrs	r3, r3, #31
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <TIM2_IRQHandler+0x40>)
 80010a8:	6013      	str	r3, [r2, #0]
	c_p = 0;								// pulses counter reset
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <TIM2_IRQHandler+0x38>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
	pid=1;
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <TIM2_IRQHandler+0x44>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000110 	.word	0x20000110
 80010c0:	55555556 	.word	0x55555556
 80010c4:	2000010c 	.word	0x2000010c
 80010c8:	20000124 	.word	0x20000124

080010cc <ADC_IRQHandler>:
void ADC_IRQHandler(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&hadc1);
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <ADC_IRQHandler+0x14>)
 80010d2:	f001 f9b5 	bl	8002440 <HAL_ADC_IRQHandler>
	// Re-Start ADC in interrupt Mode
	HAL_ADC_Start_IT(&hadc1) ;
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <ADC_IRQHandler+0x14>)
 80010d8:	f001 f8f4 	bl	80022c4 <HAL_ADC_Start_IT>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000ac 	.word	0x200000ac

080010e4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	// Variables

	// Read the analog input value
	raw_in = HAL_ADC_GetValue(&hadc1);
 80010ec:	481a      	ldr	r0, [pc, #104]	; (8001158 <HAL_ADC_ConvCpltCallback+0x74>)
 80010ee:	f001 fab7 	bl	8002660 <HAL_ADC_GetValue>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_ADC_ConvCpltCallback+0x78>)
 80010f8:	801a      	strh	r2, [r3, #0]
	// Converts value in the 0V-3.3V range
	Pot_mv = (((float)raw_in) /250 ) * 60;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_ADC_ConvCpltCallback+0x78>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001106:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001160 <HAL_ADC_ConvCpltCallback+0x7c>
 800110a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001164 <HAL_ADC_ConvCpltCallback+0x80>
 8001112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_ADC_ConvCpltCallback+0x84>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
	// Convert mV to temperature
	Pot = ((int)Pot_mv);
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_ADC_ConvCpltCallback+0x84>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001126:	ee17 2a90 	vmov	r2, s15
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_ADC_ConvCpltCallback+0x88>)
 800112c:	601a      	str	r2, [r3, #0]
	Potshow=(Pot*45)/60;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_ADC_ConvCpltCallback+0x88>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	011a      	lsls	r2, r3, #4
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <HAL_ADC_ConvCpltCallback+0x8c>)
 800113e:	fb82 1203 	smull	r1, r2, r2, r3
 8001142:	441a      	add	r2, r3
 8001144:	1152      	asrs	r2, r2, #5
 8001146:	17db      	asrs	r3, r3, #31
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_ADC_ConvCpltCallback+0x90>)
 800114c:	6013      	str	r3, [r2, #0]
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000ac 	.word	0x200000ac
 800115c:	200000f4 	.word	0x200000f4
 8001160:	437a0000 	.word	0x437a0000
 8001164:	42700000 	.word	0x42700000
 8001168:	200000f8 	.word	0x200000f8
 800116c:	200000fc 	.word	0x200000fc
 8001170:	88888889 	.word	0x88888889
 8001174:	20000100 	.word	0x20000100

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b090      	sub	sp, #64	; 0x40
 800117c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f000 ffc7 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 fbaf 	bl	80018e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 fc69 	bl	8001a5c <MX_GPIO_Init>
  MX_ADC1_Init();
 800118a:	f000 fc15 	bl	80019b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Enable clock on GPIOA/GPIOB/GPIO
      RCC->AHB1ENR |= 0x07;
 800118e:	4b95      	ldr	r3, [pc, #596]	; (80013e4 <main+0x26c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a94      	ldr	r2, [pc, #592]	; (80013e4 <main+0x26c>)
 8001194:	f043 0307 	orr.w	r3, r3, #7
 8001198:	6313      	str	r3, [r2, #48]	; 0x30

      /* Booton  GPIOA5 and GPIOA6 GPIOA7 GPIOA10 */
      // GPIOA5 <-> PC_5 (USER_BUTTON)
      GPIOA->MODER &= ~(0x03 << 10); // Clear MODER GPIOA5
 800119a:	4b93      	ldr	r3, [pc, #588]	; (80013e8 <main+0x270>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a92      	ldr	r2, [pc, #584]	; (80013e8 <main+0x270>)
 80011a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80011a4:	6013      	str	r3, [r2, #0]
      GPIOA->MODER |= (0x00 << 10);  // Set Input
 80011a6:	4b90      	ldr	r3, [pc, #576]	; (80013e8 <main+0x270>)
 80011a8:	4a8f      	ldr	r2, [pc, #572]	; (80013e8 <main+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6013      	str	r3, [r2, #0]
      GPIOA->PUPDR &= ~(0x03 << 10); // Clear PUPDR GPIOA5
 80011ae:	4b8e      	ldr	r3, [pc, #568]	; (80013e8 <main+0x270>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	4a8d      	ldr	r2, [pc, #564]	; (80013e8 <main+0x270>)
 80011b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80011b8:	60d3      	str	r3, [r2, #12]
      GPIOA->PUPDR |= (0x00 << 10);  // Set Pull-Up
 80011ba:	4b8b      	ldr	r3, [pc, #556]	; (80013e8 <main+0x270>)
 80011bc:	4a8a      	ldr	r2, [pc, #552]	; (80013e8 <main+0x270>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60d3      	str	r3, [r2, #12]

      //GPIOA6 <-> PC_6
      GPIOC->MODER &= ~(0x03 << 12); // Clear MODER GPIOA6
 80011c2:	4b8a      	ldr	r3, [pc, #552]	; (80013ec <main+0x274>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a89      	ldr	r2, [pc, #548]	; (80013ec <main+0x274>)
 80011c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011cc:	6013      	str	r3, [r2, #0]
      GPIOC->MODER |= (0x00 << 12);  // Set Input
 80011ce:	4b87      	ldr	r3, [pc, #540]	; (80013ec <main+0x274>)
 80011d0:	4a86      	ldr	r2, [pc, #536]	; (80013ec <main+0x274>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6013      	str	r3, [r2, #0]
      GPIOC->PUPDR &= ~(0x03 << 12); // Clear PUPDR GPIOA6
 80011d6:	4b85      	ldr	r3, [pc, #532]	; (80013ec <main+0x274>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	4a84      	ldr	r2, [pc, #528]	; (80013ec <main+0x274>)
 80011dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e0:	60d3      	str	r3, [r2, #12]
      GPIOC->PUPDR |= (0x00 << 12);  // Set Pull-Up
 80011e2:	4b82      	ldr	r3, [pc, #520]	; (80013ec <main+0x274>)
 80011e4:	4a81      	ldr	r2, [pc, #516]	; (80013ec <main+0x274>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60d3      	str	r3, [r2, #12]
      /** GPIOA Configuration **/

       GPIOA->MODER  &= ~(0x03 << 14); // Clear GPIOA7
 80011ea:	4b7f      	ldr	r3, [pc, #508]	; (80013e8 <main+0x270>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a7e      	ldr	r2, [pc, #504]	; (80013e8 <main+0x270>)
 80011f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011f4:	6013      	str	r3, [r2, #0]
       GPIOA->MODER |= (0x00 << 14);   // Set Input
 80011f6:	4b7c      	ldr	r3, [pc, #496]	; (80013e8 <main+0x270>)
 80011f8:	4a7b      	ldr	r2, [pc, #492]	; (80013e8 <main+0x270>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6013      	str	r3, [r2, #0]
       // Pull-Up Mode su pin di input
       GPIOA->PUPDR |= (0x01 << 14);
 80011fe:	4b7a      	ldr	r3, [pc, #488]	; (80013e8 <main+0x270>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	4a79      	ldr	r2, [pc, #484]	; (80013e8 <main+0x270>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	60d3      	str	r3, [r2, #12]

       GPIOA->MODER  &= ~(0x03 << 20); // Clear GPIOA10
 800120a:	4b77      	ldr	r3, [pc, #476]	; (80013e8 <main+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a76      	ldr	r2, [pc, #472]	; (80013e8 <main+0x270>)
 8001210:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001214:	6013      	str	r3, [r2, #0]
       GPIOA->MODER |= (0x00 << 20);   // Set Input
 8001216:	4b74      	ldr	r3, [pc, #464]	; (80013e8 <main+0x270>)
 8001218:	4a73      	ldr	r2, [pc, #460]	; (80013e8 <main+0x270>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6013      	str	r3, [r2, #0]
       // Pull-Up Mode su pin di input
       GPIOA->PUPDR |= (0x01 << 20);
 800121e:	4b72      	ldr	r3, [pc, #456]	; (80013e8 <main+0x270>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	4a71      	ldr	r2, [pc, #452]	; (80013e8 <main+0x270>)
 8001224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001228:	60d3      	str	r3, [r2, #12]

       /** GPIOB Configuration **/
       GPIOB->MODER  &= ~(0x03 << 12); // Clear GPIOB6
 800122a:	4b71      	ldr	r3, [pc, #452]	; (80013f0 <main+0x278>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a70      	ldr	r2, [pc, #448]	; (80013f0 <main+0x278>)
 8001230:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001234:	6013      	str	r3, [r2, #0]
       GPIOB->MODER |= (0x01 << 12);  // Set Output
 8001236:	4b6e      	ldr	r3, [pc, #440]	; (80013f0 <main+0x278>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6d      	ldr	r2, [pc, #436]	; (80013f0 <main+0x278>)
 800123c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001240:	6013      	str	r3, [r2, #0]
       // Push-Pull output & Pull-up
       GPIOB->OTYPER &= ~(0x1 << 6);
 8001242:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <main+0x278>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a6a      	ldr	r2, [pc, #424]	; (80013f0 <main+0x278>)
 8001248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800124c:	6053      	str	r3, [r2, #4]
       GPIOB->PUPDR &= ~(0x03 << 12); // Clear GPIOB6
 800124e:	4b68      	ldr	r3, [pc, #416]	; (80013f0 <main+0x278>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	4a67      	ldr	r2, [pc, #412]	; (80013f0 <main+0x278>)
 8001254:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001258:	60d3      	str	r3, [r2, #12]
       GPIOB->PUPDR |= (0x01 << 12);
 800125a:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <main+0x278>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	4a64      	ldr	r2, [pc, #400]	; (80013f0 <main+0x278>)
 8001260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001264:	60d3      	str	r3, [r2, #12]

       /** GPIOC Configuration **/
       GPIOC->MODER  &= ~(0x03 << 14); // Clear GPIOC7
 8001266:	4b61      	ldr	r3, [pc, #388]	; (80013ec <main+0x274>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a60      	ldr	r2, [pc, #384]	; (80013ec <main+0x274>)
 800126c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001270:	6013      	str	r3, [r2, #0]
       GPIOC->MODER |= (0x01 << 14);  // Set Output
 8001272:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <main+0x274>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5d      	ldr	r2, [pc, #372]	; (80013ec <main+0x274>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6013      	str	r3, [r2, #0]
       // Push-Pull output & Pull-up
       GPIOC->OTYPER &= ~(0x1 << 7);
 800127e:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <main+0x274>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a5a      	ldr	r2, [pc, #360]	; (80013ec <main+0x274>)
 8001284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001288:	6053      	str	r3, [r2, #4]
       GPIOC->PUPDR &= ~(0x03 << 14); // Clear GPIOC7
 800128a:	4b58      	ldr	r3, [pc, #352]	; (80013ec <main+0x274>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	4a57      	ldr	r2, [pc, #348]	; (80013ec <main+0x274>)
 8001290:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001294:	60d3      	str	r3, [r2, #12]
       GPIOC->PUPDR |= (0x01 << 14);
 8001296:	4b55      	ldr	r3, [pc, #340]	; (80013ec <main+0x274>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	4a54      	ldr	r2, [pc, #336]	; (80013ec <main+0x274>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	60d3      	str	r3, [r2, #12]

   	/* Config PC2 - Encoder1 */
     	GPIOC->MODER &= ~(0x03 << 4); // Clear MODER GPIOC13
 80012a2:	4b52      	ldr	r3, [pc, #328]	; (80013ec <main+0x274>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a51      	ldr	r2, [pc, #324]	; (80013ec <main+0x274>)
 80012a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012ac:	6013      	str	r3, [r2, #0]
     	GPIOC->MODER |= (0x00 << 4);  // Set Input
 80012ae:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <main+0x274>)
 80012b0:	4a4e      	ldr	r2, [pc, #312]	; (80013ec <main+0x274>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6013      	str	r3, [r2, #0]
     	GPIOC->PUPDR &= ~(0x03 << 4); // Clear PUPDR GPIOC13
 80012b6:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <main+0x274>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	4a4c      	ldr	r2, [pc, #304]	; (80013ec <main+0x274>)
 80012bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012c0:	60d3      	str	r3, [r2, #12]
     	GPIOC->PUPDR |= (0x01 << 4);  // Set Pull-Up
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <main+0x274>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4a49      	ldr	r2, [pc, #292]	; (80013ec <main+0x274>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	60d3      	str	r3, [r2, #12]

       /* GPIO configuration for PMW */
       // MICRO SERVO
       	GPIOB->MODER &= ~(0x03 << 8);       // Clear GPIOB4
 80012ce:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <main+0x278>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <main+0x278>)
 80012d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012d8:	6013      	str	r3, [r2, #0]
       	GPIOB->MODER |= (0x02 << 8);		// Alternate Function (AF) Mode
 80012da:	4b45      	ldr	r3, [pc, #276]	; (80013f0 <main+0x278>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a44      	ldr	r2, [pc, #272]	; (80013f0 <main+0x278>)
 80012e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e4:	6013      	str	r3, [r2, #0]
       	GPIOB->PUPDR &= ~(0x03 << 8);
 80012e6:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <main+0x278>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	4a41      	ldr	r2, [pc, #260]	; (80013f0 <main+0x278>)
 80012ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012f0:	60d3      	str	r3, [r2, #12]
       	GPIOB->PUPDR |= (0x01 << 8);		// Pull-up
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <main+0x278>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <main+0x278>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	60d3      	str	r3, [r2, #12]
       	GPIOB->AFR[0] |= (0x02 << 16);		// [0]=AFRL, <<16 = pin4, 0x02 = AF2
 80012fe:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <main+0x278>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a3b      	ldr	r2, [pc, #236]	; (80013f0 <main+0x278>)
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	6213      	str	r3, [r2, #32]
       // GEARMOTOR
     	GPIOB->MODER &= ~(0x03 << 10);      // Clear GPIOB5
 800130a:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <main+0x278>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a38      	ldr	r2, [pc, #224]	; (80013f0 <main+0x278>)
 8001310:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001314:	6013      	str	r3, [r2, #0]
      	GPIOB->MODER |= (0x02 << 10);		// Alternate Function (AF) Mode
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <main+0x278>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a35      	ldr	r2, [pc, #212]	; (80013f0 <main+0x278>)
 800131c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001320:	6013      	str	r3, [r2, #0]
      	GPIOB->PUPDR &= ~(0x03 << 10);
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <main+0x278>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <main+0x278>)
 8001328:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800132c:	60d3      	str	r3, [r2, #12]
      	GPIOB->PUPDR |= (0x01 << 10);		// Pull-up
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <main+0x278>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <main+0x278>)
 8001334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001338:	60d3      	str	r3, [r2, #12]
      	GPIOB->AFR[0] |= (0x02 << 20);		// [0]=AFRL, <<20 = pin5, 0x02 = AF2
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <main+0x278>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <main+0x278>)
 8001340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001344:	6213      	str	r3, [r2, #32]
        // Output LOW
        GPIOB->ODR &= ~(0x01 << 6);
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <main+0x278>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <main+0x278>)
 800134c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001350:	6153      	str	r3, [r2, #20]
        GPIOC->ODR &= ~(0x01 << 7);
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <main+0x274>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a25      	ldr	r2, [pc, #148]	; (80013ec <main+0x274>)
 8001358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800135c:	6153      	str	r3, [r2, #20]


      	// TIMER 3 CONFIGURATION
         	RCC->APB1ENR |= (0x01 << 1);		// clock TIM3
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <main+0x26c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <main+0x26c>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
      		TIM3->PSC = 320;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <main+0x27c>)
 800136c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
      		TIM3->ARR = 999;
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <main+0x27c>)
 8001374:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c

      		// ch1
      		TIM3->CCMR1 |= (0x6 << 4);			// PWM Mode in Capture/Compare register (ch1)
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <main+0x27c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <main+0x27c>)
 8001380:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001384:	6193      	str	r3, [r2, #24]
      		TIM3->CCER |= (1 << 0);				// Enable Capture/Compare output (ch1)
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <main+0x27c>)
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4a1a      	ldr	r2, [pc, #104]	; (80013f4 <main+0x27c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6213      	str	r3, [r2, #32]
      		TIM3->CR1 |= (1 << 0);				// Counter Enable
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <main+0x27c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <main+0x27c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6013      	str	r3, [r2, #0]
      		TIM3->CCR1 &= 0;
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <main+0x27c>)
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <main+0x27c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
      		TIM3->CCR1 = 50;					// Duty-cycle (ch1)
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <main+0x27c>)
 80013aa:	2232      	movs	r2, #50	; 0x32
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34

      		// ch2
      		TIM3->CCMR1 |= (0x6 << 12);			// PWM Mode in Capture/Compare register (ch2)
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <main+0x27c>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <main+0x27c>)
 80013b4:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80013b8:	6193      	str	r3, [r2, #24]
      		TIM3->CCER |= (1 << 4);				// Enable Capture/Compare output (ch2)
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <main+0x27c>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <main+0x27c>)
 80013c0:	f043 0310 	orr.w	r3, r3, #16
 80013c4:	6213      	str	r3, [r2, #32]
      		TIM3->CR1 |= (1 << 0);			    // Counter Enable
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <main+0x27c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <main+0x27c>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6013      	str	r3, [r2, #0]

      		TIM3->CCR2 &= 0;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <main+0x27c>)
 80013d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <main+0x27c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
       		TIM3->CCR2 = 0;						// Duty-cycle (ch2)
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <main+0x27c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	639a      	str	r2, [r3, #56]	; 0x38
 80013e2:	e009      	b.n	80013f8 <main+0x280>
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40000400 	.word	0x40000400

       	 /* Timer 1 to check the encoder */
       	  	RCC->APB1ENR |= (0x01 << 0);	// Clock TIM2
 80013f8:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <main+0x400>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a5e      	ldr	r2, [pc, #376]	; (8001578 <main+0x400>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
       	  	TIM2->PSC = 5999;
 8001404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001408:	f241 726f 	movw	r2, #5999	; 0x176f
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
       	  	TIM2->ARR = 3999;
 800140e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001412:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
       	  	TIM2->DIER &= ~0x01;
 8001418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	60d3      	str	r3, [r2, #12]
       	  	TIM2->DIER|=0x01;					// Interrupt Enable
 8001428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	60d3      	str	r3, [r2, #12]
       	  	NVIC_ClearPendingIRQ(TIM2_IRQn);
 8001438:	201c      	movs	r0, #28
 800143a:	f7ff fd4d 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
       	  	NVIC_EnableIRQ(TIM2_IRQn);
 800143e:	201c      	movs	r0, #28
 8001440:	f7ff fd2c 	bl	8000e9c <__NVIC_EnableIRQ>
       	  	//__enable_irq();
       	  	TIM2->CR1 |= (0x01 << 0);
 8001444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

      /* Gestione interrupts */
       // Abilitazione clock per SYSCFG (bit 14)
       RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001454:	4b48      	ldr	r3, [pc, #288]	; (8001578 <main+0x400>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	4a47      	ldr	r2, [pc, #284]	; (8001578 <main+0x400>)
 800145a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145e:	6453      	str	r3, [r2, #68]	; 0x44

       SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI6_PA;	// External interrupt on GPIOA6
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <main+0x404>)
 8001462:	4a46      	ldr	r2, [pc, #280]	; (800157c <main+0x404>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	60d3      	str	r3, [r2, #12]
       SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA;//0x0020U; // External interrupt on GPIOA5
 8001468:	4b44      	ldr	r3, [pc, #272]	; (800157c <main+0x404>)
 800146a:	4a44      	ldr	r2, [pc, #272]	; (800157c <main+0x404>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	60d3      	str	r3, [r2, #12]
       SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI7_PA;//0x0020U; // External interrupt on GPIOA7
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <main+0x404>)
 8001472:	4a42      	ldr	r2, [pc, #264]	; (800157c <main+0x404>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	60d3      	str	r3, [r2, #12]
       SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PC;//0x0020U; // External interrupt on GPIOC2
 8001478:	4b40      	ldr	r3, [pc, #256]	; (800157c <main+0x404>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a3f      	ldr	r2, [pc, #252]	; (800157c <main+0x404>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001482:	6093      	str	r3, [r2, #8]

       EXTI->IMR |= (0x01 << 6) | (0x01 << 5)| (0x01 << 7)| (0x01 << 2);     // Set not masked interrupt
 8001484:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <main+0x408>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a3d      	ldr	r2, [pc, #244]	; (8001580 <main+0x408>)
 800148a:	f043 03e4 	orr.w	r3, r3, #228	; 0xe4
 800148e:	6013      	str	r3, [r2, #0]
       EXTI->RTSR |= (0x01 << 7);    // Rising Edge
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <main+0x408>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a3a      	ldr	r2, [pc, #232]	; (8001580 <main+0x408>)
 8001496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149a:	6093      	str	r3, [r2, #8]
       EXTI->FTSR |= (0x01 << 6) | (0x01 << 5)| (0x01 << 2);    // Falling Edge
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <main+0x408>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4a37      	ldr	r2, [pc, #220]	; (8001580 <main+0x408>)
 80014a2:	f043 0364 	orr.w	r3, r3, #100	; 0x64
 80014a6:	60d3      	str	r3, [r2, #12]

       // Abilitazione Interrupt
       __asm volatile ("cpsie i" : : : "memory"); // Change Processor State, Enable Interrupts
 80014a8:	b662      	cpsie	i
       /* Gestione NVIC */
       // PA_5 Y 6 y 10
       NVIC_SetPriority(EXTI9_5_IRQn, 0);
 80014aa:	2100      	movs	r1, #0
 80014ac:	2017      	movs	r0, #23
 80014ae:	f7ff fd31 	bl	8000f14 <__NVIC_SetPriority>
       NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 80014b2:	2017      	movs	r0, #23
 80014b4:	f7ff fd10 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
       NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014b8:	2017      	movs	r0, #23
 80014ba:	f7ff fcef 	bl	8000e9c <__NVIC_EnableIRQ>
       // INTERRUPTION OF ENCODER
     	NVIC_SetPriority(EXTI2_IRQn, 0);
 80014be:	2100      	movs	r1, #0
 80014c0:	2008      	movs	r0, #8
 80014c2:	f7ff fd27 	bl	8000f14 <__NVIC_SetPriority>
     	NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80014c6:	2008      	movs	r0, #8
 80014c8:	f7ff fd06 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
     	NVIC_EnableIRQ(EXTI2_IRQn);
 80014cc:	2008      	movs	r0, #8
 80014ce:	f7ff fce5 	bl	8000e9c <__NVIC_EnableIRQ>

       // Interrupt configuration for ADC
       NVIC_SetPriority(ADC_IRQn, 0);
 80014d2:	2100      	movs	r1, #0
 80014d4:	2012      	movs	r0, #18
 80014d6:	f7ff fd1d 	bl	8000f14 <__NVIC_SetPriority>
       NVIC_EnableIRQ(ADC_IRQn);
 80014da:	2012      	movs	r0, #18
 80014dc:	f7ff fcde 	bl	8000e9c <__NVIC_EnableIRQ>
       // Start ADC in interrupt Mode
       HAL_ADC_Start_IT(&hadc1);
 80014e0:	4828      	ldr	r0, [pc, #160]	; (8001584 <main+0x40c>)
 80014e2:	f000 feef 	bl	80022c4 <HAL_ADC_Start_IT>

       //ASIGNATION OF PORTS FOR LCD

       // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
         Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOC };
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <main+0x410>)
 80014e8:	f107 0420 	add.w	r4, r7, #32
 80014ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
         Lcd_PinType pins[] = {GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_13};
 80014f2:	4a26      	ldr	r2, [pc, #152]	; (800158c <main+0x414>)
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014fc:	e883 0003 	stmia.w	r3, {r0, r1}
         //Lcd_HandleTypeDef lcd;
         // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
         lcd = Lcd_create(ports, pins, GPIOC, GPIO_PIN_10, GPIOC, GPIO_PIN_12, LCD_4_BIT_MODE);
 8001500:	4c23      	ldr	r4, [pc, #140]	; (8001590 <main+0x418>)
 8001502:	4638      	mov	r0, r7
 8001504:	f107 0218 	add.w	r2, r7, #24
 8001508:	f107 0120 	add.w	r1, r7, #32
 800150c:	2300      	movs	r3, #0
 800150e:	9303      	str	r3, [sp, #12]
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <main+0x41c>)
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <main+0x41c>)
 8001522:	f7ff fb6d 	bl	8000c00 <Lcd_create>
 8001526:	4625      	mov	r5, r4
 8001528:	463c      	mov	r4, r7
 800152a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001532:	e885 0003 	stmia.w	r5, {r0, r1}
         Lcd_clear(&lcd);
 8001536:	4816      	ldr	r0, [pc, #88]	; (8001590 <main+0x418>)
 8001538:	f7ff fc08 	bl	8000d4c <Lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!(GPIOA->IDR >> 10 & 0x1) & z==0){
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <main+0x420>)
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	0a9b      	lsrs	r3, r3, #10
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <main+0x424>)
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	f040 80ef 	bne.w	8001730 <main+0x5b8>
	  	   GPIOB->ODR  |=  (0x01 << 6);
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <main+0x428>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <main+0x428>)
 8001558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800155c:	6153      	str	r3, [r2, #20]
	  	   GPIOC->ODR  &= ~  (0x01 << 7);
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <main+0x41c>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <main+0x41c>)
 8001564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001568:	6153      	str	r3, [r2, #20]
	  	   x=0;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <main+0x42c>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
		   start();
 8001570:	f000 fb52 	bl	8001c18 <start>
          while (y==1){
 8001574:	e0d6      	b.n	8001724 <main+0x5ac>
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	40013c00 	.word	0x40013c00
 8001584:	200000ac 	.word	0x200000ac
 8001588:	080042a4 	.word	0x080042a4
 800158c:	080042b4 	.word	0x080042b4
 8001590:	20000094 	.word	0x20000094
 8001594:	40020800 	.word	0x40020800
 8001598:	40020000 	.word	0x40020000
 800159c:	2000011c 	.word	0x2000011c
 80015a0:	40020400 	.word	0x40020400
 80015a4:	20000114 	.word	0x20000114
	           if(emergency == 1){
 80015a8:	4b72      	ldr	r3, [pc, #456]	; (8001774 <main+0x5fc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d119      	bne.n	80015e4 <main+0x46c>
	        	 Lcd_clear(&lcd);
 80015b0:	4871      	ldr	r0, [pc, #452]	; (8001778 <main+0x600>)
 80015b2:	f7ff fbcb 	bl	8000d4c <Lcd_clear>
	        	 Lcd_cursor(&lcd, 0,3);
 80015b6:	2203      	movs	r2, #3
 80015b8:	2100      	movs	r1, #0
 80015ba:	486f      	ldr	r0, [pc, #444]	; (8001778 <main+0x600>)
 80015bc:	f7ff fbac 	bl	8000d18 <Lcd_cursor>
	        	 Lcd_string(&lcd, "EMERGENCY");
 80015c0:	496e      	ldr	r1, [pc, #440]	; (800177c <main+0x604>)
 80015c2:	486d      	ldr	r0, [pc, #436]	; (8001778 <main+0x600>)
 80015c4:	f7ff fb88 	bl	8000cd8 <Lcd_string>
	        	 Lcd_cursor(&lcd, 1,6);
 80015c8:	2206      	movs	r2, #6
 80015ca:	2101      	movs	r1, #1
 80015cc:	486a      	ldr	r0, [pc, #424]	; (8001778 <main+0x600>)
 80015ce:	f7ff fba3 	bl	8000d18 <Lcd_cursor>
	        	 Lcd_string(&lcd, "STOP");
 80015d2:	496b      	ldr	r1, [pc, #428]	; (8001780 <main+0x608>)
 80015d4:	4868      	ldr	r0, [pc, #416]	; (8001778 <main+0x600>)
 80015d6:	f7ff fb7f 	bl	8000cd8 <Lcd_string>
	          	 EmergencyStop();
 80015da:	f000 fab7 	bl	8001b4c <EmergencyStop>
	             Lcd_clear(&lcd);
 80015de:	4866      	ldr	r0, [pc, #408]	; (8001778 <main+0x600>)
 80015e0:	f7ff fbb4 	bl	8000d4c <Lcd_clear>
                }
	           velocities();
 80015e4:	f000 fb62 	bl	8001cac <velocities>
	  	     if(pid==1 && velocity>0){
 80015e8:	4b66      	ldr	r3, [pc, #408]	; (8001784 <main+0x60c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d111      	bne.n	8001614 <main+0x49c>
 80015f0:	4b65      	ldr	r3, [pc, #404]	; (8001788 <main+0x610>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	dd0d      	ble.n	8001614 <main+0x49c>
	  	    	 pwm=calculate_PID();
 80015f8:	f000 fb9a 	bl	8001d30 <calculate_PID>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a63      	ldr	r2, [pc, #396]	; (800178c <main+0x614>)
 8001600:	6013      	str	r3, [r2, #0]
	  	    	TIM3->CCR2 &= 0;
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <main+0x618>)
 8001604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001606:	4b62      	ldr	r3, [pc, #392]	; (8001790 <main+0x618>)
 8001608:	2200      	movs	r2, #0
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
	  	    	TIM3->CCR2 = pwm;
 800160c:	4b5f      	ldr	r3, [pc, #380]	; (800178c <main+0x614>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <main+0x618>)
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
	  	     }
	  	     pid=0;
 8001614:	4b5b      	ldr	r3, [pc, #364]	; (8001784 <main+0x60c>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
	           Lcd_cursor(&lcd, 0,0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	4856      	ldr	r0, [pc, #344]	; (8001778 <main+0x600>)
 8001620:	f7ff fb7a 	bl	8000d18 <Lcd_cursor>
	  	  	   Lcd_string(&lcd, "Velocity:");
 8001624:	495b      	ldr	r1, [pc, #364]	; (8001794 <main+0x61c>)
 8001626:	4854      	ldr	r0, [pc, #336]	; (8001778 <main+0x600>)
 8001628:	f7ff fb56 	bl	8000cd8 <Lcd_string>
	  	  	   Lcd_cursor(&lcd, 0,9);
 800162c:	2209      	movs	r2, #9
 800162e:	2100      	movs	r1, #0
 8001630:	4851      	ldr	r0, [pc, #324]	; (8001778 <main+0x600>)
 8001632:	f7ff fb71 	bl	8000d18 <Lcd_cursor>
	  	  	   Lcd_int(&lcd, velocity);
 8001636:	4b54      	ldr	r3, [pc, #336]	; (8001788 <main+0x610>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	484e      	ldr	r0, [pc, #312]	; (8001778 <main+0x600>)
 800163e:	f7ff fb33 	bl	8000ca8 <Lcd_int>
	  	       Lcd_cursor(&lcd, 0,13);
 8001642:	220d      	movs	r2, #13
 8001644:	2100      	movs	r1, #0
 8001646:	484c      	ldr	r0, [pc, #304]	; (8001778 <main+0x600>)
 8001648:	f7ff fb66 	bl	8000d18 <Lcd_cursor>
	  	       Lcd_int(&lcd, ref);
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <main+0x620>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	4849      	ldr	r0, [pc, #292]	; (8001778 <main+0x600>)
 8001654:	f7ff fb28 	bl	8000ca8 <Lcd_int>
	  	  	   if (ref<10){
 8001658:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <main+0x620>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b09      	cmp	r3, #9
 800165e:	dc08      	bgt.n	8001672 <main+0x4fa>
		  	  	   Lcd_cursor(&lcd, 0,14);
 8001660:	220e      	movs	r2, #14
 8001662:	2100      	movs	r1, #0
 8001664:	4844      	ldr	r0, [pc, #272]	; (8001778 <main+0x600>)
 8001666:	f7ff fb57 	bl	8000d18 <Lcd_cursor>
		  	  	   Lcd_string(&lcd, " ");
 800166a:	494c      	ldr	r1, [pc, #304]	; (800179c <main+0x624>)
 800166c:	4842      	ldr	r0, [pc, #264]	; (8001778 <main+0x600>)
 800166e:	f7ff fb33 	bl	8000cd8 <Lcd_string>
	  	  	   }
		  	  	if (ref<100){
 8001672:	4b49      	ldr	r3, [pc, #292]	; (8001798 <main+0x620>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b63      	cmp	r3, #99	; 0x63
 8001678:	dc08      	bgt.n	800168c <main+0x514>
		  	  	  Lcd_cursor(&lcd, 0,15);
 800167a:	220f      	movs	r2, #15
 800167c:	2100      	movs	r1, #0
 800167e:	483e      	ldr	r0, [pc, #248]	; (8001778 <main+0x600>)
 8001680:	f7ff fb4a 	bl	8000d18 <Lcd_cursor>
		  	  	  Lcd_string(&lcd, " ");
 8001684:	4945      	ldr	r1, [pc, #276]	; (800179c <main+0x624>)
 8001686:	483c      	ldr	r0, [pc, #240]	; (8001778 <main+0x600>)
 8001688:	f7ff fb26 	bl	8000cd8 <Lcd_string>
		  	  	}

	  	       Lcd_cursor(&lcd, 1,0);
 800168c:	2200      	movs	r2, #0
 800168e:	2101      	movs	r1, #1
 8001690:	4839      	ldr	r0, [pc, #228]	; (8001778 <main+0x600>)
 8001692:	f7ff fb41 	bl	8000d18 <Lcd_cursor>
	  	  	   Lcd_string(&lcd, "Inclination:");
 8001696:	4942      	ldr	r1, [pc, #264]	; (80017a0 <main+0x628>)
 8001698:	4837      	ldr	r0, [pc, #220]	; (8001778 <main+0x600>)
 800169a:	f7ff fb1d 	bl	8000cd8 <Lcd_string>
	  	  	   if (Pot<10){
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <main+0x62c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b09      	cmp	r3, #9
 80016a4:	dc08      	bgt.n	80016b8 <main+0x540>
		  	  	   Lcd_cursor(&lcd, 1,14);
 80016a6:	220e      	movs	r2, #14
 80016a8:	2101      	movs	r1, #1
 80016aa:	4833      	ldr	r0, [pc, #204]	; (8001778 <main+0x600>)
 80016ac:	f7ff fb34 	bl	8000d18 <Lcd_cursor>
		  	  	   Lcd_string(&lcd, " ");
 80016b0:	493a      	ldr	r1, [pc, #232]	; (800179c <main+0x624>)
 80016b2:	4831      	ldr	r0, [pc, #196]	; (8001778 <main+0x600>)
 80016b4:	f7ff fb10 	bl	8000cd8 <Lcd_string>
	  	  	   }
	  	  	   Lcd_cursor(&lcd, 1,13);
 80016b8:	220d      	movs	r2, #13
 80016ba:	2101      	movs	r1, #1
 80016bc:	482e      	ldr	r0, [pc, #184]	; (8001778 <main+0x600>)
 80016be:	f7ff fb2b 	bl	8000d18 <Lcd_cursor>
	  	  	   Lcd_int(&lcd, Potshow);
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <main+0x630>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	482b      	ldr	r0, [pc, #172]	; (8001778 <main+0x600>)
 80016ca:	f7ff faed 	bl	8000ca8 <Lcd_int>
	  	  	   //velocities();
	 		   TIM3->CCR1 &= 0;
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <main+0x618>)
 80016d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <main+0x618>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
	 		   TIM3->CCR1 = 50+Potshow;
 80016d8:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <main+0x630>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <main+0x618>)
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	   if ((GPIOA->IDR >> 10 & 0x1) & Pot<5 & velocity==0){
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <main+0x634>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	0a9b      	lsrs	r3, r3, #10
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <main+0x62c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	bfd4      	ite	le
 80016f8:	2301      	movle	r3, #1
 80016fa:	2300      	movgt	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4013      	ands	r3, r2
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <main+0x610>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf0c      	ite	eq
 800170c:	2301      	moveq	r3, #1
 800170e:	2300      	movne	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <main+0x5ac>
	  	  		   z=1;
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <main+0x638>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]
	  	  		   y=0;
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <main+0x63c>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
          while (y==1){
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <main+0x63c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	f43f af3d 	beq.w	80015a8 <main+0x430>
 800172e:	e085      	b.n	800183c <main+0x6c4>
	  	  	   }
	  	  }
	  }
	  else if((GPIOA->IDR >> 10 & 0x1) & z==1){
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <main+0x634>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	0a9b      	lsrs	r3, r3, #10
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <main+0x638>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	4013      	ands	r3, r2
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d074      	beq.n	800183c <main+0x6c4>
	   		GPIOB->ODR  &= ~  (0x01 << 6);
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <main+0x640>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <main+0x640>)
 8001758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800175c:	6153      	str	r3, [r2, #20]
	   		GPIOC->ODR  &= ~  (0x01 << 7);
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <main+0x644>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <main+0x644>)
 8001764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001768:	6153      	str	r3, [r2, #20]
	   		Lcd_clear(&lcd);
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <main+0x600>)
 800176c:	f7ff faee 	bl	8000d4c <Lcd_clear>
	   		while  (x<=5){
 8001770:	e04b      	b.n	800180a <main+0x692>
 8001772:	bf00      	nop
 8001774:	20000104 	.word	0x20000104
 8001778:	20000094 	.word	0x20000094
 800177c:	08004240 	.word	0x08004240
 8001780:	0800424c 	.word	0x0800424c
 8001784:	20000124 	.word	0x20000124
 8001788:	20000108 	.word	0x20000108
 800178c:	2000012c 	.word	0x2000012c
 8001790:	40000400 	.word	0x40000400
 8001794:	08004254 	.word	0x08004254
 8001798:	20000120 	.word	0x20000120
 800179c:	08004260 	.word	0x08004260
 80017a0:	08004264 	.word	0x08004264
 80017a4:	200000fc 	.word	0x200000fc
 80017a8:	20000100 	.word	0x20000100
 80017ac:	40020000 	.word	0x40020000
 80017b0:	2000011c 	.word	0x2000011c
 80017b4:	20000118 	.word	0x20000118
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800
	   			Lcd_cursor(&lcd, 0,4);
 80017c0:	2204      	movs	r2, #4
 80017c2:	2100      	movs	r1, #0
 80017c4:	483d      	ldr	r0, [pc, #244]	; (80018bc <main+0x744>)
 80017c6:	f7ff faa7 	bl	8000d18 <Lcd_cursor>
	   		    Lcd_string(&lcd, "GOODBYE");
 80017ca:	493d      	ldr	r1, [pc, #244]	; (80018c0 <main+0x748>)
 80017cc:	483b      	ldr	r0, [pc, #236]	; (80018bc <main+0x744>)
 80017ce:	f7ff fa83 	bl	8000cd8 <Lcd_string>
	   			HAL_Delay (650);
 80017d2:	f240 208a 	movw	r0, #650	; 0x28a
 80017d6:	f000 fd0d 	bl	80021f4 <HAL_Delay>
	   			Lcd_clear(&lcd);
 80017da:	4838      	ldr	r0, [pc, #224]	; (80018bc <main+0x744>)
 80017dc:	f7ff fab6 	bl	8000d4c <Lcd_clear>
	   			GPIOC->ODR ^= (0x01 << 7);
 80017e0:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <main+0x74c>)
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	4a37      	ldr	r2, [pc, #220]	; (80018c4 <main+0x74c>)
 80017e6:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80017ea:	6153      	str	r3, [r2, #20]
	   			GPIOB->ODR ^= (0x1 << 6);
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <main+0x750>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	4a35      	ldr	r2, [pc, #212]	; (80018c8 <main+0x750>)
 80017f2:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80017f6:	6153      	str	r3, [r2, #20]
	   			HAL_Delay (650);
 80017f8:	f240 208a 	movw	r0, #650	; 0x28a
 80017fc:	f000 fcfa 	bl	80021f4 <HAL_Delay>
	   			x++;
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <main+0x754>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a31      	ldr	r2, [pc, #196]	; (80018cc <main+0x754>)
 8001808:	6013      	str	r3, [r2, #0]
	   		while  (x<=5){
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <main+0x754>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b05      	cmp	r3, #5
 8001810:	ddd6      	ble.n	80017c0 <main+0x648>
	   		}
	   		GPIOB->ODR  &= ~  (0x01 << 6);
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <main+0x750>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4a2c      	ldr	r2, [pc, #176]	; (80018c8 <main+0x750>)
 8001818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800181c:	6153      	str	r3, [r2, #20]
	   		GPIOC->ODR  &= ~  (0x01 << 7);
 800181e:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <main+0x74c>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <main+0x74c>)
 8001824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001828:	6153      	str	r3, [r2, #20]
	   		z=0;
 800182a:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <main+0x758>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
	   		x=0;
 8001830:	4b26      	ldr	r3, [pc, #152]	; (80018cc <main+0x754>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
	   		Lcd_clear(&lcd);
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <main+0x744>)
 8001838:	f7ff fa88 	bl	8000d4c <Lcd_clear>


	  }
	  if (!(GPIOA->IDR >> 10 & 0x1) & z==1){
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <main+0x75c>)
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	0a9b      	lsrs	r3, r3, #10
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <main+0x758>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4013      	ands	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	f43f ae6a 	beq.w	800153c <main+0x3c4>

		    GPIOC->ODR  &= ~  (0x01 << 7);
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <main+0x74c>)
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <main+0x74c>)
 800186e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001872:	6153      	str	r3, [r2, #20]
			Lcd_cursor(&lcd, 0,0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <main+0x744>)
 800187a:	f7ff fa4d 	bl	8000d18 <Lcd_cursor>
		    Lcd_string(&lcd, "PUT SWICH TO OFF");
 800187e:	4916      	ldr	r1, [pc, #88]	; (80018d8 <main+0x760>)
 8001880:	480e      	ldr	r0, [pc, #56]	; (80018bc <main+0x744>)
 8001882:	f7ff fa29 	bl	8000cd8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 8001886:	2200      	movs	r2, #0
 8001888:	2101      	movs	r1, #1
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <main+0x744>)
 800188c:	f7ff fa44 	bl	8000d18 <Lcd_cursor>
		    Lcd_string(&lcd, "    TO RESET    ");
 8001890:	4912      	ldr	r1, [pc, #72]	; (80018dc <main+0x764>)
 8001892:	480a      	ldr	r0, [pc, #40]	; (80018bc <main+0x744>)
 8001894:	f7ff fa20 	bl	8000cd8 <Lcd_string>
			 TIM3->CCR2 &= 0;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <main+0x768>)
 800189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <main+0x768>)
 800189e:	2200      	movs	r2, #0
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
			 TIM3->CCR2 = 0;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <main+0x768>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38
			 TIM3->CCR1 &= 0;
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <main+0x768>)
 80018aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <main+0x768>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34
			 TIM3->CCR1 = 50;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <main+0x768>)
 80018b4:	2232      	movs	r2, #50	; 0x32
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
	  if (!(GPIOA->IDR >> 10 & 0x1) & z==0){
 80018b8:	e640      	b.n	800153c <main+0x3c4>
 80018ba:	bf00      	nop
 80018bc:	20000094 	.word	0x20000094
 80018c0:	08004274 	.word	0x08004274
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020400 	.word	0x40020400
 80018cc:	20000114 	.word	0x20000114
 80018d0:	2000011c 	.word	0x2000011c
 80018d4:	40020000 	.word	0x40020000
 80018d8:	0800427c 	.word	0x0800427c
 80018dc:	08004290 	.word	0x08004290
 80018e0:	40000400 	.word	0x40000400

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b094      	sub	sp, #80	; 0x50
 80018e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	2230      	movs	r2, #48	; 0x30
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 f820 	bl	8003938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <SystemClock_Config+0xcc>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <SystemClock_Config+0xcc>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <SystemClock_Config+0xcc>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <SystemClock_Config+0xd0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <SystemClock_Config+0xd0>)
 800192e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <SystemClock_Config+0xd0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001944:	2301      	movs	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001948:	2310      	movs	r3, #16
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194c:	2302      	movs	r3, #2
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001950:	2300      	movs	r3, #0
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001954:	2308      	movs	r3, #8
 8001956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001958:	233c      	movs	r3, #60	; 0x3c
 800195a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800195c:	2302      	movs	r3, #2
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001960:	2304      	movs	r3, #4
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	4618      	mov	r0, r3
 800196a:	f001 fb57 	bl	800301c <HAL_RCC_OscConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001974:	f000 fabe 	bl	8001ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001978:	230f      	movs	r3, #15
 800197a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197c:	2302      	movs	r3, #2
 800197e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2101      	movs	r1, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f001 fdb8 	bl	800350c <HAL_RCC_ClockConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019a2:	f000 faa7 	bl	8001ef4 <Error_Handler>
  }
}
 80019a6:	bf00      	nop
 80019a8:	3750      	adds	r7, #80	; 0x50
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000

080019b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019be:	463b      	mov	r3, r7
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <MX_ADC1_Init+0x98>)
 80019cc:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <MX_ADC1_Init+0x9c>)
 80019ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <MX_ADC1_Init+0x98>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <MX_ADC1_Init+0x98>)
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <MX_ADC1_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <MX_ADC1_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <MX_ADC1_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <MX_ADC1_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_ADC1_Init+0x98>)
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <MX_ADC1_Init+0xa0>)
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_ADC1_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_ADC1_Init+0x98>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_ADC1_Init+0x98>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_ADC1_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <MX_ADC1_Init+0x98>)
 8001a1a:	f000 fc0f 	bl	800223c <HAL_ADC_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a24:	f000 fa66 	bl	8001ef4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a34:	463b      	mov	r3, r7
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_ADC1_Init+0x98>)
 8001a3a:	f000 fe33 	bl	80026a4 <HAL_ADC_ConfigChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a44:	f000 fa56 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200000ac 	.word	0x200000ac
 8001a54:	40012000 	.word	0x40012000
 8001a58:	0f000001 	.word	0x0f000001

08001a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a31      	ldr	r2, [pc, #196]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a2a      	ldr	r2, [pc, #168]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_GPIO_Init+0xe4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8001ae8:	4816      	ldr	r0, [pc, #88]	; (8001b44 <MX_GPIO_Init+0xe8>)
 8001aea:	f001 fa7d 	bl	8002fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001af4:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MX_GPIO_Init+0xec>)
 8001af6:	f001 fa77 	bl	8002fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_12;
 8001afa:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	480c      	ldr	r0, [pc, #48]	; (8001b44 <MX_GPIO_Init+0xe8>)
 8001b14:	f001 f8e4 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b18:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_GPIO_Init+0xec>)
 8001b32:	f001 f8d5 	bl	8002ce0 <HAL_GPIO_Init>

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020800 	.word	0x40020800
 8001b48:	40020000 	.word	0x40020000

08001b4c <EmergencyStop>:

/* USER CODE BEGIN 4 */
void EmergencyStop(void){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	GPIOB->ODR  &= ~ (0x01 << 6);
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <EmergencyStop+0xa0>)
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	4a25      	ldr	r2, [pc, #148]	; (8001bec <EmergencyStop+0xa0>)
 8001b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b5a:	6153      	str	r3, [r2, #20]
	GPIOC->ODR  |=  (0x01 << 7);
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <EmergencyStop+0xa4>)
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <EmergencyStop+0xa4>)
 8001b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b66:	6153      	str	r3, [r2, #20]
	//HAL_Delay(500);
	velocity=0;
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <EmergencyStop+0xa8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
	Pot=0;
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <EmergencyStop+0xac>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
	Potshow=0;
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <EmergencyStop+0xb0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
	Lcd_clear(&lcd);
 8001b7a:	4821      	ldr	r0, [pc, #132]	; (8001c00 <EmergencyStop+0xb4>)
 8001b7c:	f7ff f8e6 	bl	8000d4c <Lcd_clear>
	       Lcd_cursor(&lcd, 0,0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	481e      	ldr	r0, [pc, #120]	; (8001c00 <EmergencyStop+0xb4>)
 8001b86:	f7ff f8c7 	bl	8000d18 <Lcd_cursor>
	  	   Lcd_string(&lcd, "Velocity:");
 8001b8a:	491e      	ldr	r1, [pc, #120]	; (8001c04 <EmergencyStop+0xb8>)
 8001b8c:	481c      	ldr	r0, [pc, #112]	; (8001c00 <EmergencyStop+0xb4>)
 8001b8e:	f7ff f8a3 	bl	8000cd8 <Lcd_string>
	  	   Lcd_cursor(&lcd, 0,10);
 8001b92:	220a      	movs	r2, #10
 8001b94:	2100      	movs	r1, #0
 8001b96:	481a      	ldr	r0, [pc, #104]	; (8001c00 <EmergencyStop+0xb4>)
 8001b98:	f7ff f8be 	bl	8000d18 <Lcd_cursor>
	  	   Lcd_int(&lcd, velocity);
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <EmergencyStop+0xa8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4817      	ldr	r0, [pc, #92]	; (8001c00 <EmergencyStop+0xb4>)
 8001ba4:	f7ff f880 	bl	8000ca8 <Lcd_int>
	       Lcd_cursor(&lcd, 1,0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2101      	movs	r1, #1
 8001bac:	4814      	ldr	r0, [pc, #80]	; (8001c00 <EmergencyStop+0xb4>)
 8001bae:	f7ff f8b3 	bl	8000d18 <Lcd_cursor>
	  	   Lcd_string(&lcd, "Inclination:");
 8001bb2:	4915      	ldr	r1, [pc, #84]	; (8001c08 <EmergencyStop+0xbc>)
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <EmergencyStop+0xb4>)
 8001bb6:	f7ff f88f 	bl	8000cd8 <Lcd_string>
	  	   Lcd_cursor(&lcd, 1,13);
 8001bba:	220d      	movs	r2, #13
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4810      	ldr	r0, [pc, #64]	; (8001c00 <EmergencyStop+0xb4>)
 8001bc0:	f7ff f8aa 	bl	8000d18 <Lcd_cursor>
	  	   Lcd_int(&lcd, 0);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	480e      	ldr	r0, [pc, #56]	; (8001c00 <EmergencyStop+0xb4>)
 8001bc8:	f7ff f86e 	bl	8000ca8 <Lcd_int>
	HAL_Delay(1000);
 8001bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd0:	f000 fb10 	bl	80021f4 <HAL_Delay>
	emergency = 0;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <EmergencyStop+0xc0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
	y=0;
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <EmergencyStop+0xc4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
	z=1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <EmergencyStop+0xc8>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
	//Lcd_clear(&lcd);

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	20000108 	.word	0x20000108
 8001bf8:	200000fc 	.word	0x200000fc
 8001bfc:	20000100 	.word	0x20000100
 8001c00:	20000094 	.word	0x20000094
 8001c04:	08004254 	.word	0x08004254
 8001c08:	08004264 	.word	0x08004264
 8001c0c:	20000104 	.word	0x20000104
 8001c10:	20000118 	.word	0x20000118
 8001c14:	2000011c 	.word	0x2000011c

08001c18 <start>:
void start(void){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	   Lcd_cursor(&lcd, 0,4);
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	2100      	movs	r1, #0
 8001c20:	481c      	ldr	r0, [pc, #112]	; (8001c94 <start+0x7c>)
 8001c22:	f7ff f879 	bl	8000d18 <Lcd_cursor>
	   Lcd_string(&lcd, "WELCOME");
 8001c26:	491c      	ldr	r1, [pc, #112]	; (8001c98 <start+0x80>)
 8001c28:	481a      	ldr	r0, [pc, #104]	; (8001c94 <start+0x7c>)
 8001c2a:	f7ff f855 	bl	8000cd8 <Lcd_string>
	   HAL_Delay(3000);
 8001c2e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c32:	f000 fadf 	bl	80021f4 <HAL_Delay>
	   Lcd_clear(&lcd);
 8001c36:	4817      	ldr	r0, [pc, #92]	; (8001c94 <start+0x7c>)
 8001c38:	f7ff f888 	bl	8000d4c <Lcd_clear>
	   Lcd_cursor(&lcd, 0,6);
 8001c3c:	2206      	movs	r2, #6
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4814      	ldr	r0, [pc, #80]	; (8001c94 <start+0x7c>)
 8001c42:	f7ff f869 	bl	8000d18 <Lcd_cursor>
	   Lcd_string(&lcd, "-3-");
 8001c46:	4915      	ldr	r1, [pc, #84]	; (8001c9c <start+0x84>)
 8001c48:	4812      	ldr	r0, [pc, #72]	; (8001c94 <start+0x7c>)
 8001c4a:	f7ff f845 	bl	8000cd8 <Lcd_string>
	   HAL_Delay(1000);
 8001c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c52:	f000 facf 	bl	80021f4 <HAL_Delay>
	   Lcd_cursor(&lcd, 0,6);
 8001c56:	2206      	movs	r2, #6
 8001c58:	2100      	movs	r1, #0
 8001c5a:	480e      	ldr	r0, [pc, #56]	; (8001c94 <start+0x7c>)
 8001c5c:	f7ff f85c 	bl	8000d18 <Lcd_cursor>
	   Lcd_string(&lcd, "-2-");
 8001c60:	490f      	ldr	r1, [pc, #60]	; (8001ca0 <start+0x88>)
 8001c62:	480c      	ldr	r0, [pc, #48]	; (8001c94 <start+0x7c>)
 8001c64:	f7ff f838 	bl	8000cd8 <Lcd_string>
	   HAL_Delay(1000);
 8001c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c6c:	f000 fac2 	bl	80021f4 <HAL_Delay>
	   Lcd_cursor(&lcd, 0,6);
 8001c70:	2206      	movs	r2, #6
 8001c72:	2100      	movs	r1, #0
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <start+0x7c>)
 8001c76:	f7ff f84f 	bl	8000d18 <Lcd_cursor>
	   Lcd_string(&lcd, "-1-");
 8001c7a:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <start+0x8c>)
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <start+0x7c>)
 8001c7e:	f7ff f82b 	bl	8000cd8 <Lcd_string>
	   HAL_Delay(1000);
 8001c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c86:	f000 fab5 	bl	80021f4 <HAL_Delay>
	   y=1;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <start+0x90>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000094 	.word	0x20000094
 8001c98:	080042bc 	.word	0x080042bc
 8001c9c:	080042c4 	.word	0x080042c4
 8001ca0:	080042c8 	.word	0x080042c8
 8001ca4:	080042cc 	.word	0x080042cc
 8001ca8:	20000118 	.word	0x20000118

08001cac <velocities>:
void velocities(void){
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
	   if (velocity==0){
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <velocities+0x74>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10a      	bne.n	8001cce <velocities+0x22>
		   ref=0;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <velocities+0x78>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
		TIM3->CCR2 &= 0;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <velocities+0x7c>)
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <velocities+0x7c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR2 = 0;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <velocities+0x7c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
	   }
	   if (velocity==1){
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <velocities+0x74>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d102      	bne.n	8001cdc <velocities+0x30>
		   ref=54;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <velocities+0x78>)
 8001cd8:	2236      	movs	r2, #54	; 0x36
 8001cda:	601a      	str	r2, [r3, #0]
		/*TIM3->CCR2 &= 0;
		TIM3->CCR2 = 325;
		HAL_Delay(150);
		TIM3->CCR2 = 150;*/
	   }
	   if (velocity==2){
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <velocities+0x74>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d102      	bne.n	8001cea <velocities+0x3e>
		   ref=72;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <velocities+0x78>)
 8001ce6:	2248      	movs	r2, #72	; 0x48
 8001ce8:	601a      	str	r2, [r3, #0]
		//TIM3->CCR2 &= 0;
		//TIM3->CCR2 = 300;
	   }
	   if (velocity==3){
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <velocities+0x74>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d102      	bne.n	8001cf8 <velocities+0x4c>
		   ref=108;
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <velocities+0x78>)
 8001cf4:	226c      	movs	r2, #108	; 0x6c
 8001cf6:	601a      	str	r2, [r3, #0]
		//TIM3->CCR2 &= 0;
		//TIM3->CCR2 = 450;
	   }
	   if (velocity==4){
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <velocities+0x74>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d102      	bne.n	8001d06 <velocities+0x5a>
		   ref=135;
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <velocities+0x78>)
 8001d02:	2287      	movs	r2, #135	; 0x87
 8001d04:	601a      	str	r2, [r3, #0]
		//TIM3->CCR2 &= 0;
		//TIM3->CCR2 = 600;
	   }
	   if (velocity==5){
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <velocities+0x74>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d102      	bne.n	8001d14 <velocities+0x68>
		   ref=153;
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <velocities+0x78>)
 8001d10:	2299      	movs	r2, #153	; 0x99
 8001d12:	601a      	str	r2, [r3, #0]
		//TIM3->CCR2 &= 0;
		//TIM3->CCR2 = 750;
	   }
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000108 	.word	0x20000108
 8001d24:	20000120 	.word	0x20000120
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	00000000 	.word	0x00000000

08001d30 <calculate_PID>:

int calculate_PID(){
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

	float error = ref-c*7.5;
 8001d36:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <calculate_PID+0x1a8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fd24 	bl	8000788 <__aeabi_i2d>
 8001d40:	4604      	mov	r4, r0
 8001d42:	460d      	mov	r5, r1
 8001d44:	4b65      	ldr	r3, [pc, #404]	; (8001edc <calculate_PID+0x1ac>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fd1d 	bl	8000788 <__aeabi_i2d>
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <calculate_PID+0x1b0>)
 8001d54:	f7fe fa9c 	bl	8000290 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4629      	mov	r1, r5
 8001d60:	f7fe fbc4 	bl	80004ec <__aeabi_dsub>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe fd76 	bl	800085c <__aeabi_d2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	603b      	str	r3, [r7, #0]
	integral += (4*0.4*error);       //ki=5, ts=1
 8001d74:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <calculate_PID+0x1b4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fd17 	bl	80007ac <__aeabi_f2d>
 8001d7e:	4604      	mov	r4, r0
 8001d80:	460d      	mov	r5, r1
 8001d82:	6838      	ldr	r0, [r7, #0]
 8001d84:	f7fe fd12 	bl	80007ac <__aeabi_f2d>
 8001d88:	a351      	add	r3, pc, #324	; (adr r3, 8001ed0 <calculate_PID+0x1a0>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	f7fe fa7f 	bl	8000290 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f7fe fba9 	bl	80004f0 <__adddf3>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fd59 	bl	800085c <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a4d      	ldr	r2, [pc, #308]	; (8001ee4 <calculate_PID+0x1b4>)
 8001dae:	6013      	str	r3, [r2, #0]
	float u_input = (0.5*error)+integral;			// strategia PI  kp=1.5
 8001db0:	6838      	ldr	r0, [r7, #0]
 8001db2:	f7fe fcfb 	bl	80007ac <__aeabi_f2d>
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <calculate_PID+0x1b8>)
 8001dbc:	f7fe fa68 	bl	8000290 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4614      	mov	r4, r2
 8001dc6:	461d      	mov	r5, r3
 8001dc8:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <calculate_PID+0x1b4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fced 	bl	80007ac <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	f7fe fb89 	bl	80004f0 <__adddf3>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7fe fd39 	bl	800085c <__aeabi_d2f>
 8001dea:	4603      	mov	r3, r0
 8001dec:	607b      	str	r3, [r7, #4]
	//u_input = anti_windup(u_input, err, sPID);
	if (u_input > u_max){
 8001dee:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <calculate_PID+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	dd26      	ble.n	8001e56 <calculate_PID+0x126>
		u_input = u_max;
 8001e08:	4b38      	ldr	r3, [pc, #224]	; (8001eec <calculate_PID+0x1bc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e14:	edc7 7a01 	vstr	s15, [r7, #4]
		integral-=(4*0.4*error);
 8001e18:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <calculate_PID+0x1b4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fcc5 	bl	80007ac <__aeabi_f2d>
 8001e22:	4604      	mov	r4, r0
 8001e24:	460d      	mov	r5, r1
 8001e26:	6838      	ldr	r0, [r7, #0]
 8001e28:	f7fe fcc0 	bl	80007ac <__aeabi_f2d>
 8001e2c:	a328      	add	r3, pc, #160	; (adr r3, 8001ed0 <calculate_PID+0x1a0>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	f7fe fa2d 	bl	8000290 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	f7fe fb55 	bl	80004ec <__aeabi_dsub>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fd07 	bl	800085c <__aeabi_d2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <calculate_PID+0x1b4>)
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e032      	b.n	8001ebc <calculate_PID+0x18c>
	}
	else if (u_input < u_min){
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <calculate_PID+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e62:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	d525      	bpl.n	8001ebc <calculate_PID+0x18c>
		u_input = u_min;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <calculate_PID+0x1c0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7c:	edc7 7a01 	vstr	s15, [r7, #4]
		integral-=(4*0.4*error);
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <calculate_PID+0x1b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fc91 	bl	80007ac <__aeabi_f2d>
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	460d      	mov	r5, r1
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f7fe fc8c 	bl	80007ac <__aeabi_f2d>
 8001e94:	a30e      	add	r3, pc, #56	; (adr r3, 8001ed0 <calculate_PID+0x1a0>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe f9f9 	bl	8000290 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	f7fe fb21 	bl	80004ec <__aeabi_dsub>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fcd3 	bl	800085c <__aeabi_d2f>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <calculate_PID+0x1b4>)
 8001eba:	6013      	str	r3, [r2, #0]
	}

return (int)u_input;
 8001ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec4:	ee17 3a90 	vmov	r3, s15


}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed0:	9999999a 	.word	0x9999999a
 8001ed4:	3ff99999 	.word	0x3ff99999
 8001ed8:	20000120 	.word	0x20000120
 8001edc:	2000010c 	.word	0x2000010c
 8001ee0:	401e0000 	.word	0x401e0000
 8001ee4:	20000128 	.word	0x20000128
 8001ee8:	3fe00000 	.word	0x3fe00000
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef8:	b672      	cpsid	i
}
 8001efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001efc:	e7fe      	b.n	8001efc <Error_Handler+0x8>
	...

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f3e:	2007      	movs	r0, #7
 8001f40:	f000 fe9a 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_ADC_MspInit+0x7c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d127      	bne.n	8001fc2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_ADC_MspInit+0x80>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001faa:	2301      	movs	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <HAL_ADC_MspInit+0x84>)
 8001fbe:	f000 fe8f 	bl	8002ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40012000 	.word	0x40012000
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <NMI_Handler+0x4>

08001fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <HardFault_Handler+0x4>

08001fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <MemManage_Handler+0x4>

08001fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fee:	e7fe      	b.n	8001fee <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002024:	f000 f8c6 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f001 fc42 	bl	80038e4 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20020000 	.word	0x20020000
 800208c:	00000400 	.word	0x00000400
 8002090:	20000130 	.word	0x20000130
 8002094:	20000148 	.word	0x20000148

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c0:	480d      	ldr	r0, [pc, #52]	; (80020f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020c2:	490e      	ldr	r1, [pc, #56]	; (80020fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020c4:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d8:	4c0b      	ldr	r4, [pc, #44]	; (8002108 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020e6:	f7ff ffd7 	bl	8002098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f001 fc01 	bl	80038f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ee:	f7ff f843 	bl	8001178 <main>
  bx  lr    
 80020f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002100:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 8002104:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002108:	20000148 	.word	0x20000148

0800210c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <DMA1_Stream0_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_Init+0x40>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_Init+0x40>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_Init+0x40>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 fd9d 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	2000      	movs	r0, #0
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fedc 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fda7 	bl	8002cc6 <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 fd7d 	bl	8002c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000010 	.word	0x20000010
 80021b0:	2000000c 	.word	0x2000000c

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000010 	.word	0x20000010
 80021d8:	20000134 	.word	0x20000134

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000134 	.word	0x20000134

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff ffee 	bl	80021dc <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffde 	bl	80021dc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000010 	.word	0x20000010

0800223c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e033      	b.n	80022ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fe78 	bl	8001f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002282:	f023 0302 	bic.w	r3, r3, #2
 8002286:	f043 0202 	orr.w	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fb3a 	bl	8002908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_ADC_Start_IT+0x1a>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0a1      	b.n	8002422 <HAL_ADC_Start_IT+0x15e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d018      	beq.n	8002326 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002304:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <HAL_ADC_Start_IT+0x16c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <HAL_ADC_Start_IT+0x170>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9a      	lsrs	r2, r3, #18
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002318:	e002      	b.n	8002320 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f9      	bne.n	800231a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d169      	bne.n	8002408 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800235e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	d106      	bne.n	8002382 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	f023 0206 	bic.w	r2, r3, #6
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
 8002380:	e002      	b.n	8002388 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_ADC_Start_IT+0x174>)
 8002392:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800239c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023ac:	f043 0320 	orr.w	r3, r3, #32
 80023b0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d129      	bne.n	8002420 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e020      	b.n	8002420 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a16      	ldr	r2, [pc, #88]	; (800243c <HAL_ADC_Start_IT+0x178>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d11b      	bne.n	8002420 <HAL_ADC_Start_IT+0x15c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d114      	bne.n	8002420 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	e00b      	b.n	8002420 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f043 0210 	orr.w	r2, r3, #16
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000008 	.word	0x20000008
 8002434:	431bde83 	.word	0x431bde83
 8002438:	40012300 	.word	0x40012300
 800243c:	40012000 	.word	0x40012000

08002440 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d049      	beq.n	800250a <HAL_ADC_IRQHandler+0xca>
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d046      	beq.n	800250a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d12b      	bne.n	80024fa <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d127      	bne.n	80024fa <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d119      	bne.n	80024fa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0220 	bic.w	r2, r2, #32
 80024d4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fdf2 	bl	80010e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0212 	mvn.w	r2, #18
 8002508:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d057      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x190>
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d054      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d139      	bne.n	80025c0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002564:	2b00      	cmp	r3, #0
 8002566:	d12b      	bne.n	80025c0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d124      	bne.n	80025c0 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002580:	2b00      	cmp	r3, #0
 8002582:	d11d      	bne.n	80025c0 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002588:	2b00      	cmp	r3, #0
 800258a:	d119      	bne.n	80025c0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800259a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fa9d 	bl	8002b00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f06f 020c 	mvn.w	r2, #12
 80025ce:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d017      	beq.n	8002616 <HAL_ADC_IRQHandler+0x1d6>
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d014      	beq.n	8002616 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10d      	bne.n	8002616 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f837 	bl	800267a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0201 	mvn.w	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002624:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_ADC_IRQHandler+0x218>
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f06f 0220 	mvn.w	r2, #32
 8002646:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f820 	bl	800268e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0220 	mvn.w	r2, #32
 8002656:	601a      	str	r2, [r3, #0]
  }
}
 8002658:	bf00      	nop
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e113      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x244>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d925      	bls.n	800271c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	3b1e      	subs	r3, #30
 80026e6:	2207      	movs	r2, #7
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43da      	mvns	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	400a      	ands	r2, r1
 80026f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68d9      	ldr	r1, [r3, #12]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	4618      	mov	r0, r3
 8002708:	4603      	mov	r3, r0
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4403      	add	r3, r0
 800270e:	3b1e      	subs	r3, #30
 8002710:	409a      	lsls	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	e022      	b.n	8002762 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6919      	ldr	r1, [r3, #16]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	2207      	movs	r2, #7
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	400a      	ands	r2, r1
 800273e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	4603      	mov	r3, r0
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4403      	add	r3, r0
 8002758:	409a      	lsls	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b06      	cmp	r3, #6
 8002768:	d824      	bhi.n	80027b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	3b05      	subs	r3, #5
 800277c:	221f      	movs	r2, #31
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	400a      	ands	r2, r1
 800278a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4618      	mov	r0, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	3b05      	subs	r3, #5
 80027a6:	fa00 f203 	lsl.w	r2, r0, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34
 80027b2:	e04c      	b.n	800284e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d824      	bhi.n	8002806 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	3b23      	subs	r3, #35	; 0x23
 80027ce:	221f      	movs	r2, #31
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43da      	mvns	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	400a      	ands	r2, r1
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	3b23      	subs	r3, #35	; 0x23
 80027f8:	fa00 f203 	lsl.w	r2, r0, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
 8002804:	e023      	b.n	800284e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3b41      	subs	r3, #65	; 0x41
 8002818:	221f      	movs	r2, #31
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	4618      	mov	r0, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	3b41      	subs	r3, #65	; 0x41
 8002842:	fa00 f203 	lsl.w	r2, r0, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <HAL_ADC_ConfigChannel+0x250>)
 8002850:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <HAL_ADC_ConfigChannel+0x254>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d10f      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1d8>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b12      	cmp	r3, #18
 8002862:	d10b      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <HAL_ADC_ConfigChannel+0x254>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d12b      	bne.n	80028de <HAL_ADC_ConfigChannel+0x23a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_ADC_ConfigChannel+0x258>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x1f4>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b11      	cmp	r3, #17
 8002896:	d122      	bne.n	80028de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_ADC_ConfigChannel+0x258>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d111      	bne.n	80028de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_ADC_ConfigChannel+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a11      	ldr	r2, [pc, #68]	; (8002904 <HAL_ADC_ConfigChannel+0x260>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	0c9a      	lsrs	r2, r3, #18
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d0:	e002      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f9      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40012300 	.word	0x40012300
 80028f8:	40012000 	.word	0x40012000
 80028fc:	10000012 	.word	0x10000012
 8002900:	20000008 	.word	0x20000008
 8002904:	431bde83 	.word	0x431bde83

08002908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002910:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <ADC_Init+0x1f0>)
 8002912:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800293c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	021a      	lsls	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	4a58      	ldr	r2, [pc, #352]	; (8002afc <ADC_Init+0x1f4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	e00f      	b.n	8002a06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0202 	bic.w	r2, r2, #2
 8002a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7e1b      	ldrb	r3, [r3, #24]
 8002a20:	005a      	lsls	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	035a      	lsls	r2, r3, #13
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	e007      	b.n	8002a7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	051a      	lsls	r2, r3, #20
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002abe:	025a      	lsls	r2, r3, #9
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	029a      	lsls	r2, r3, #10
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40012300 	.word	0x40012300
 8002afc:	0f000001 	.word	0x0f000001

08002b00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <__NVIC_SetPriorityGrouping>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60d3      	str	r3, [r2, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_GetPriorityGrouping>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_GetPriorityGrouping+0x18>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0307 	and.w	r3, r3, #7
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_SetPriority>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff47 	bl	8002b14 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff5c 	bl	8002b5c <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff8e 	bl	8002bcc <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffb0 	bl	8002c34 <SysTick_Config>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e159      	b.n	8002fb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	f040 8148 	bne.w	8002faa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d005      	beq.n	8002d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d130      	bne.n	8002d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 0201 	and.w	r2, r3, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d017      	beq.n	8002dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d123      	bne.n	8002e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	08da      	lsrs	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3208      	adds	r2, #8
 8002de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	220f      	movs	r2, #15
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	08da      	lsrs	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3208      	adds	r2, #8
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0203 	and.w	r2, r3, #3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a2 	beq.w	8002faa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b57      	ldr	r3, [pc, #348]	; (8002fc8 <HAL_GPIO_Init+0x2e8>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	4a56      	ldr	r2, [pc, #344]	; (8002fc8 <HAL_GPIO_Init+0x2e8>)
 8002e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e74:	6453      	str	r3, [r2, #68]	; 0x44
 8002e76:	4b54      	ldr	r3, [pc, #336]	; (8002fc8 <HAL_GPIO_Init+0x2e8>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e82:	4a52      	ldr	r2, [pc, #328]	; (8002fcc <HAL_GPIO_Init+0x2ec>)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	220f      	movs	r2, #15
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a49      	ldr	r2, [pc, #292]	; (8002fd0 <HAL_GPIO_Init+0x2f0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d019      	beq.n	8002ee2 <HAL_GPIO_Init+0x202>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a48      	ldr	r2, [pc, #288]	; (8002fd4 <HAL_GPIO_Init+0x2f4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_GPIO_Init+0x1fe>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a47      	ldr	r2, [pc, #284]	; (8002fd8 <HAL_GPIO_Init+0x2f8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00d      	beq.n	8002eda <HAL_GPIO_Init+0x1fa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a46      	ldr	r2, [pc, #280]	; (8002fdc <HAL_GPIO_Init+0x2fc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <HAL_GPIO_Init+0x1f6>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a45      	ldr	r2, [pc, #276]	; (8002fe0 <HAL_GPIO_Init+0x300>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_GPIO_Init+0x1f2>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	e008      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ed2:	2307      	movs	r3, #7
 8002ed4:	e006      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e004      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e002      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f002 0203 	and.w	r2, r2, #3
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	4093      	lsls	r3, r2
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef4:	4935      	ldr	r1, [pc, #212]	; (8002fcc <HAL_GPIO_Init+0x2ec>)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	3302      	adds	r3, #2
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f02:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f26:	4a2f      	ldr	r2, [pc, #188]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f50:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3301      	adds	r3, #1
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	f67f aea2 	bls.w	8002cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40013c00 	.word	0x40013c00

08002fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff8:	787b      	ldrb	r3, [r7, #1]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003004:	e003      	b.n	800300e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003006:	887b      	ldrh	r3, [r7, #2]
 8003008:	041a      	lsls	r2, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	619a      	str	r2, [r3, #24]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e267      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d075      	beq.n	8003126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303a:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCC_OscConfig+0x240>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b04      	cmp	r3, #4
 8003044:	d00c      	beq.n	8003060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003046:	4b85      	ldr	r3, [pc, #532]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304e:	2b08      	cmp	r3, #8
 8003050:	d112      	bne.n	8003078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003052:	4b82      	ldr	r3, [pc, #520]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305e:	d10b      	bne.n	8003078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	4b7e      	ldr	r3, [pc, #504]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d05b      	beq.n	8003124 <HAL_RCC_OscConfig+0x108>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d157      	bne.n	8003124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e242      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d106      	bne.n	8003090 <HAL_RCC_OscConfig+0x74>
 8003082:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a75      	ldr	r2, [pc, #468]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e01d      	b.n	80030cc <HAL_RCC_OscConfig+0xb0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x98>
 800309a:	4b70      	ldr	r3, [pc, #448]	; (800325c <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a6f      	ldr	r2, [pc, #444]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b6d      	ldr	r3, [pc, #436]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6c      	ldr	r2, [pc, #432]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e00b      	b.n	80030cc <HAL_RCC_OscConfig+0xb0>
 80030b4:	4b69      	ldr	r3, [pc, #420]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a68      	ldr	r2, [pc, #416]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b66      	ldr	r3, [pc, #408]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a65      	ldr	r2, [pc, #404]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7ff f882 	bl	80021dc <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7ff f87e 	bl	80021dc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e207      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	4b5b      	ldr	r3, [pc, #364]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0xc0>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7ff f86e 	bl	80021dc <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003104:	f7ff f86a 	bl	80021dc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e1f3      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	4b51      	ldr	r3, [pc, #324]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0xe8>
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d063      	beq.n	80031fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003132:	4b4a      	ldr	r3, [pc, #296]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003146:	2b08      	cmp	r3, #8
 8003148:	d11c      	bne.n	8003184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314a:	4b44      	ldr	r3, [pc, #272]	; (800325c <HAL_RCC_OscConfig+0x240>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d116      	bne.n	8003184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x152>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e1c7      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4937      	ldr	r1, [pc, #220]	; (800325c <HAL_RCC_OscConfig+0x240>)
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	e03a      	b.n	80031fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318c:	4b34      	ldr	r3, [pc, #208]	; (8003260 <HAL_RCC_OscConfig+0x244>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7ff f823 	bl	80021dc <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319a:	f7ff f81f 	bl	80021dc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e1a8      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4925      	ldr	r1, [pc, #148]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_OscConfig+0x244>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7ff f802 	bl	80021dc <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031dc:	f7fe fffe 	bl	80021dc <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e187      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d036      	beq.n	8003274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <HAL_RCC_OscConfig+0x248>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fe ffe2 	bl	80021dc <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321c:	f7fe ffde 	bl	80021dc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e167      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x200>
 800323a:	e01b      	b.n	8003274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_RCC_OscConfig+0x248>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003242:	f7fe ffcb 	bl	80021dc <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003248:	e00e      	b.n	8003268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324a:	f7fe ffc7 	bl	80021dc <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d907      	bls.n	8003268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e150      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
 800325c:	40023800 	.word	0x40023800
 8003260:	42470000 	.word	0x42470000
 8003264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800326a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ea      	bne.n	800324a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8097 	beq.w	80033b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003286:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	4b7d      	ldr	r3, [pc, #500]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a7c      	ldr	r2, [pc, #496]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
 80032a2:	4b7a      	ldr	r3, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b77      	ldr	r3, [pc, #476]	; (8003490 <HAL_RCC_OscConfig+0x474>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d118      	bne.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032be:	4b74      	ldr	r3, [pc, #464]	; (8003490 <HAL_RCC_OscConfig+0x474>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a73      	ldr	r2, [pc, #460]	; (8003490 <HAL_RCC_OscConfig+0x474>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ca:	f7fe ff87 	bl	80021dc <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fe ff83 	bl	80021dc <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e10c      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e4:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <HAL_RCC_OscConfig+0x474>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d106      	bne.n	8003306 <HAL_RCC_OscConfig+0x2ea>
 80032f8:	4b64      	ldr	r3, [pc, #400]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a63      	ldr	r2, [pc, #396]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	e01c      	b.n	8003340 <HAL_RCC_OscConfig+0x324>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b05      	cmp	r3, #5
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x30c>
 800330e:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	4a5e      	ldr	r2, [pc, #376]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	6713      	str	r3, [r2, #112]	; 0x70
 800331a:	4b5c      	ldr	r3, [pc, #368]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a5b      	ldr	r2, [pc, #364]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0x324>
 8003328:	4b58      	ldr	r3, [pc, #352]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a57      	ldr	r2, [pc, #348]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	4b55      	ldr	r3, [pc, #340]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a54      	ldr	r2, [pc, #336]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 0304 	bic.w	r3, r3, #4
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d015      	beq.n	8003374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fe ff48 	bl	80021dc <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fe ff44 	bl	80021dc <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0cb      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0ee      	beq.n	8003350 <HAL_RCC_OscConfig+0x334>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003374:	f7fe ff32 	bl	80021dc <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fe ff2e 	bl	80021dc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0b5      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003392:	4b3e      	ldr	r3, [pc, #248]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1ee      	bne.n	800337c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a4:	4b39      	ldr	r3, [pc, #228]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	4a38      	ldr	r2, [pc, #224]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80033aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80a1 	beq.w	80034fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ba:	4b34      	ldr	r3, [pc, #208]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d05c      	beq.n	8003480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d141      	bne.n	8003452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ce:	4b31      	ldr	r3, [pc, #196]	; (8003494 <HAL_RCC_OscConfig+0x478>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe ff02 	bl	80021dc <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fe fefe 	bl	80021dc <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e087      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	4b27      	ldr	r3, [pc, #156]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	019b      	lsls	r3, r3, #6
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	3b01      	subs	r3, #1
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	491b      	ldr	r1, [pc, #108]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_RCC_OscConfig+0x478>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fe fed7 	bl	80021dc <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003432:	f7fe fed3 	bl	80021dc <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e05c      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x416>
 8003450:	e054      	b.n	80034fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCC_OscConfig+0x478>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fec0 	bl	80021dc <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003460:	f7fe febc 	bl	80021dc <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e045      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x444>
 800347e:	e03d      	b.n	80034fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d107      	bne.n	8003498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e038      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
 800348c:	40023800 	.word	0x40023800
 8003490:	40007000 	.word	0x40007000
 8003494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4ec>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d028      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d121      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d11a      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d111      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	3b01      	subs	r3, #1
 80034e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800

0800350c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0cc      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003520:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d90c      	bls.n	8003548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b65      	ldr	r3, [pc, #404]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b63      	ldr	r3, [pc, #396]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0b8      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003560:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a58      	ldr	r2, [pc, #352]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800356a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	494d      	ldr	r1, [pc, #308]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d044      	beq.n	800362c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d119      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e07f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d003      	beq.n	80035ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ca:	4b3f      	ldr	r3, [pc, #252]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e06f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e067      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ea:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f023 0203 	bic.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4934      	ldr	r1, [pc, #208]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035fc:	f7fe fdee 	bl	80021dc <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	e00a      	b.n	800361a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003604:	f7fe fdea 	bl	80021dc <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e04f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 020c 	and.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	429a      	cmp	r2, r3
 800362a:	d1eb      	bne.n	8003604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d20c      	bcs.n	8003654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e032      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4916      	ldr	r1, [pc, #88]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367e:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	490e      	ldr	r1, [pc, #56]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003692:	f000 f821 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003696:	4602      	mov	r2, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	490a      	ldr	r1, [pc, #40]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	5ccb      	ldrb	r3, [r1, r3]
 80036a6:	fa22 f303 	lsr.w	r3, r2, r3
 80036aa:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fd4e 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023c00 	.word	0x40023c00
 80036c8:	40023800 	.word	0x40023800
 80036cc:	080042d4 	.word	0x080042d4
 80036d0:	20000008 	.word	0x20000008
 80036d4:	2000000c 	.word	0x2000000c

080036d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036dc:	b094      	sub	sp, #80	; 0x50
 80036de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	647b      	str	r3, [r7, #68]	; 0x44
 80036e4:	2300      	movs	r3, #0
 80036e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e8:	2300      	movs	r3, #0
 80036ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f0:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d00d      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x40>
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	f200 80e1 	bhi.w	80038c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x34>
 8003706:	2b04      	cmp	r3, #4
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x3a>
 800370a:	e0db      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4b73      	ldr	r3, [pc, #460]	; (80038dc <HAL_RCC_GetSysClockFreq+0x204>)
 800370e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003710:	e0db      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003712:	4b73      	ldr	r3, [pc, #460]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003716:	e0d8      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003718:	4b6f      	ldr	r3, [pc, #444]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003720:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003722:	4b6d      	ldr	r3, [pc, #436]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d063      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372e:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	2200      	movs	r2, #0
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
 8003738:	63fa      	str	r2, [r7, #60]	; 0x3c
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
 8003746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800374a:	4622      	mov	r2, r4
 800374c:	462b      	mov	r3, r5
 800374e:	f04f 0000 	mov.w	r0, #0
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	0159      	lsls	r1, r3, #5
 8003758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800375c:	0150      	lsls	r0, r2, #5
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4621      	mov	r1, r4
 8003764:	1a51      	subs	r1, r2, r1
 8003766:	6139      	str	r1, [r7, #16]
 8003768:	4629      	mov	r1, r5
 800376a:	eb63 0301 	sbc.w	r3, r3, r1
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800377c:	4659      	mov	r1, fp
 800377e:	018b      	lsls	r3, r1, #6
 8003780:	4651      	mov	r1, sl
 8003782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003786:	4651      	mov	r1, sl
 8003788:	018a      	lsls	r2, r1, #6
 800378a:	4651      	mov	r1, sl
 800378c:	ebb2 0801 	subs.w	r8, r2, r1
 8003790:	4659      	mov	r1, fp
 8003792:	eb63 0901 	sbc.w	r9, r3, r1
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037aa:	4690      	mov	r8, r2
 80037ac:	4699      	mov	r9, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	eb18 0303 	adds.w	r3, r8, r3
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	462b      	mov	r3, r5
 80037b8:	eb49 0303 	adc.w	r3, r9, r3
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ca:	4629      	mov	r1, r5
 80037cc:	024b      	lsls	r3, r1, #9
 80037ce:	4621      	mov	r1, r4
 80037d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d4:	4621      	mov	r1, r4
 80037d6:	024a      	lsls	r2, r1, #9
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037de:	2200      	movs	r2, #0
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037e8:	f7fd f888 	bl	80008fc <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4613      	mov	r3, r2
 80037f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f4:	e058      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f6:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	2200      	movs	r2, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	4611      	mov	r1, r2
 8003802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003806:	623b      	str	r3, [r7, #32]
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
 800380c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	f04f 0000 	mov.w	r0, #0
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	0159      	lsls	r1, r3, #5
 800381e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003822:	0150      	lsls	r0, r2, #5
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4641      	mov	r1, r8
 800382a:	ebb2 0a01 	subs.w	sl, r2, r1
 800382e:	4649      	mov	r1, r9
 8003830:	eb63 0b01 	sbc.w	fp, r3, r1
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003848:	ebb2 040a 	subs.w	r4, r2, sl
 800384c:	eb63 050b 	sbc.w	r5, r3, fp
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	00eb      	lsls	r3, r5, #3
 800385a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385e:	00e2      	lsls	r2, r4, #3
 8003860:	4614      	mov	r4, r2
 8003862:	461d      	mov	r5, r3
 8003864:	4643      	mov	r3, r8
 8003866:	18e3      	adds	r3, r4, r3
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	464b      	mov	r3, r9
 800386c:	eb45 0303 	adc.w	r3, r5, r3
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387e:	4629      	mov	r1, r5
 8003880:	028b      	lsls	r3, r1, #10
 8003882:	4621      	mov	r1, r4
 8003884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003888:	4621      	mov	r1, r4
 800388a:	028a      	lsls	r2, r1, #10
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003892:	2200      	movs	r2, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	61fa      	str	r2, [r7, #28]
 8003898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800389c:	f7fd f82e 	bl	80008fc <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	3301      	adds	r3, #1
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetSysClockFreq+0x204>)
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3750      	adds	r7, #80	; 0x50
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	00f42400 	.word	0x00f42400
 80038e0:	007a1200 	.word	0x007a1200

080038e4 <__errno>:
 80038e4:	4b01      	ldr	r3, [pc, #4]	; (80038ec <__errno+0x8>)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000014 	.word	0x20000014

080038f0 <__libc_init_array>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	4d0d      	ldr	r5, [pc, #52]	; (8003928 <__libc_init_array+0x38>)
 80038f4:	4c0d      	ldr	r4, [pc, #52]	; (800392c <__libc_init_array+0x3c>)
 80038f6:	1b64      	subs	r4, r4, r5
 80038f8:	10a4      	asrs	r4, r4, #2
 80038fa:	2600      	movs	r6, #0
 80038fc:	42a6      	cmp	r6, r4
 80038fe:	d109      	bne.n	8003914 <__libc_init_array+0x24>
 8003900:	4d0b      	ldr	r5, [pc, #44]	; (8003930 <__libc_init_array+0x40>)
 8003902:	4c0c      	ldr	r4, [pc, #48]	; (8003934 <__libc_init_array+0x44>)
 8003904:	f000 fc8e 	bl	8004224 <_init>
 8003908:	1b64      	subs	r4, r4, r5
 800390a:	10a4      	asrs	r4, r4, #2
 800390c:	2600      	movs	r6, #0
 800390e:	42a6      	cmp	r6, r4
 8003910:	d105      	bne.n	800391e <__libc_init_array+0x2e>
 8003912:	bd70      	pop	{r4, r5, r6, pc}
 8003914:	f855 3b04 	ldr.w	r3, [r5], #4
 8003918:	4798      	blx	r3
 800391a:	3601      	adds	r6, #1
 800391c:	e7ee      	b.n	80038fc <__libc_init_array+0xc>
 800391e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003922:	4798      	blx	r3
 8003924:	3601      	adds	r6, #1
 8003926:	e7f2      	b.n	800390e <__libc_init_array+0x1e>
 8003928:	08004320 	.word	0x08004320
 800392c:	08004320 	.word	0x08004320
 8003930:	08004320 	.word	0x08004320
 8003934:	08004324 	.word	0x08004324

08003938 <memset>:
 8003938:	4402      	add	r2, r0
 800393a:	4603      	mov	r3, r0
 800393c:	4293      	cmp	r3, r2
 800393e:	d100      	bne.n	8003942 <memset+0xa>
 8003940:	4770      	bx	lr
 8003942:	f803 1b01 	strb.w	r1, [r3], #1
 8003946:	e7f9      	b.n	800393c <memset+0x4>

08003948 <siprintf>:
 8003948:	b40e      	push	{r1, r2, r3}
 800394a:	b500      	push	{lr}
 800394c:	b09c      	sub	sp, #112	; 0x70
 800394e:	ab1d      	add	r3, sp, #116	; 0x74
 8003950:	9002      	str	r0, [sp, #8]
 8003952:	9006      	str	r0, [sp, #24]
 8003954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003958:	4809      	ldr	r0, [pc, #36]	; (8003980 <siprintf+0x38>)
 800395a:	9107      	str	r1, [sp, #28]
 800395c:	9104      	str	r1, [sp, #16]
 800395e:	4909      	ldr	r1, [pc, #36]	; (8003984 <siprintf+0x3c>)
 8003960:	f853 2b04 	ldr.w	r2, [r3], #4
 8003964:	9105      	str	r1, [sp, #20]
 8003966:	6800      	ldr	r0, [r0, #0]
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	a902      	add	r1, sp, #8
 800396c:	f000 f868 	bl	8003a40 <_svfiprintf_r>
 8003970:	9b02      	ldr	r3, [sp, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	b01c      	add	sp, #112	; 0x70
 8003978:	f85d eb04 	ldr.w	lr, [sp], #4
 800397c:	b003      	add	sp, #12
 800397e:	4770      	bx	lr
 8003980:	20000014 	.word	0x20000014
 8003984:	ffff0208 	.word	0xffff0208

08003988 <__ssputs_r>:
 8003988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800398c:	688e      	ldr	r6, [r1, #8]
 800398e:	429e      	cmp	r6, r3
 8003990:	4682      	mov	sl, r0
 8003992:	460c      	mov	r4, r1
 8003994:	4690      	mov	r8, r2
 8003996:	461f      	mov	r7, r3
 8003998:	d838      	bhi.n	8003a0c <__ssputs_r+0x84>
 800399a:	898a      	ldrh	r2, [r1, #12]
 800399c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039a0:	d032      	beq.n	8003a08 <__ssputs_r+0x80>
 80039a2:	6825      	ldr	r5, [r4, #0]
 80039a4:	6909      	ldr	r1, [r1, #16]
 80039a6:	eba5 0901 	sub.w	r9, r5, r1
 80039aa:	6965      	ldr	r5, [r4, #20]
 80039ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039b4:	3301      	adds	r3, #1
 80039b6:	444b      	add	r3, r9
 80039b8:	106d      	asrs	r5, r5, #1
 80039ba:	429d      	cmp	r5, r3
 80039bc:	bf38      	it	cc
 80039be:	461d      	movcc	r5, r3
 80039c0:	0553      	lsls	r3, r2, #21
 80039c2:	d531      	bpl.n	8003a28 <__ssputs_r+0xa0>
 80039c4:	4629      	mov	r1, r5
 80039c6:	f000 fb63 	bl	8004090 <_malloc_r>
 80039ca:	4606      	mov	r6, r0
 80039cc:	b950      	cbnz	r0, 80039e4 <__ssputs_r+0x5c>
 80039ce:	230c      	movs	r3, #12
 80039d0:	f8ca 3000 	str.w	r3, [sl]
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e4:	6921      	ldr	r1, [r4, #16]
 80039e6:	464a      	mov	r2, r9
 80039e8:	f000 fabe 	bl	8003f68 <memcpy>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	6126      	str	r6, [r4, #16]
 80039fa:	6165      	str	r5, [r4, #20]
 80039fc:	444e      	add	r6, r9
 80039fe:	eba5 0509 	sub.w	r5, r5, r9
 8003a02:	6026      	str	r6, [r4, #0]
 8003a04:	60a5      	str	r5, [r4, #8]
 8003a06:	463e      	mov	r6, r7
 8003a08:	42be      	cmp	r6, r7
 8003a0a:	d900      	bls.n	8003a0e <__ssputs_r+0x86>
 8003a0c:	463e      	mov	r6, r7
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	4632      	mov	r2, r6
 8003a12:	4641      	mov	r1, r8
 8003a14:	f000 fab6 	bl	8003f84 <memmove>
 8003a18:	68a3      	ldr	r3, [r4, #8]
 8003a1a:	1b9b      	subs	r3, r3, r6
 8003a1c:	60a3      	str	r3, [r4, #8]
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	4433      	add	r3, r6
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	2000      	movs	r0, #0
 8003a26:	e7db      	b.n	80039e0 <__ssputs_r+0x58>
 8003a28:	462a      	mov	r2, r5
 8003a2a:	f000 fba5 	bl	8004178 <_realloc_r>
 8003a2e:	4606      	mov	r6, r0
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d1e1      	bne.n	80039f8 <__ssputs_r+0x70>
 8003a34:	6921      	ldr	r1, [r4, #16]
 8003a36:	4650      	mov	r0, sl
 8003a38:	f000 fabe 	bl	8003fb8 <_free_r>
 8003a3c:	e7c7      	b.n	80039ce <__ssputs_r+0x46>
	...

08003a40 <_svfiprintf_r>:
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a44:	4698      	mov	r8, r3
 8003a46:	898b      	ldrh	r3, [r1, #12]
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	b09d      	sub	sp, #116	; 0x74
 8003a4c:	4607      	mov	r7, r0
 8003a4e:	460d      	mov	r5, r1
 8003a50:	4614      	mov	r4, r2
 8003a52:	d50e      	bpl.n	8003a72 <_svfiprintf_r+0x32>
 8003a54:	690b      	ldr	r3, [r1, #16]
 8003a56:	b963      	cbnz	r3, 8003a72 <_svfiprintf_r+0x32>
 8003a58:	2140      	movs	r1, #64	; 0x40
 8003a5a:	f000 fb19 	bl	8004090 <_malloc_r>
 8003a5e:	6028      	str	r0, [r5, #0]
 8003a60:	6128      	str	r0, [r5, #16]
 8003a62:	b920      	cbnz	r0, 8003a6e <_svfiprintf_r+0x2e>
 8003a64:	230c      	movs	r3, #12
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	e0d1      	b.n	8003c12 <_svfiprintf_r+0x1d2>
 8003a6e:	2340      	movs	r3, #64	; 0x40
 8003a70:	616b      	str	r3, [r5, #20]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9309      	str	r3, [sp, #36]	; 0x24
 8003a76:	2320      	movs	r3, #32
 8003a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a80:	2330      	movs	r3, #48	; 0x30
 8003a82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c2c <_svfiprintf_r+0x1ec>
 8003a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a8a:	f04f 0901 	mov.w	r9, #1
 8003a8e:	4623      	mov	r3, r4
 8003a90:	469a      	mov	sl, r3
 8003a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a96:	b10a      	cbz	r2, 8003a9c <_svfiprintf_r+0x5c>
 8003a98:	2a25      	cmp	r2, #37	; 0x25
 8003a9a:	d1f9      	bne.n	8003a90 <_svfiprintf_r+0x50>
 8003a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003aa0:	d00b      	beq.n	8003aba <_svfiprintf_r+0x7a>
 8003aa2:	465b      	mov	r3, fp
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	f7ff ff6d 	bl	8003988 <__ssputs_r>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	f000 80aa 	beq.w	8003c08 <_svfiprintf_r+0x1c8>
 8003ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ab6:	445a      	add	r2, fp
 8003ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8003aba:	f89a 3000 	ldrb.w	r3, [sl]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a2 	beq.w	8003c08 <_svfiprintf_r+0x1c8>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ace:	f10a 0a01 	add.w	sl, sl, #1
 8003ad2:	9304      	str	r3, [sp, #16]
 8003ad4:	9307      	str	r3, [sp, #28]
 8003ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ada:	931a      	str	r3, [sp, #104]	; 0x68
 8003adc:	4654      	mov	r4, sl
 8003ade:	2205      	movs	r2, #5
 8003ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ae4:	4851      	ldr	r0, [pc, #324]	; (8003c2c <_svfiprintf_r+0x1ec>)
 8003ae6:	f7fc fb83 	bl	80001f0 <memchr>
 8003aea:	9a04      	ldr	r2, [sp, #16]
 8003aec:	b9d8      	cbnz	r0, 8003b26 <_svfiprintf_r+0xe6>
 8003aee:	06d0      	lsls	r0, r2, #27
 8003af0:	bf44      	itt	mi
 8003af2:	2320      	movmi	r3, #32
 8003af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003af8:	0711      	lsls	r1, r2, #28
 8003afa:	bf44      	itt	mi
 8003afc:	232b      	movmi	r3, #43	; 0x2b
 8003afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b02:	f89a 3000 	ldrb.w	r3, [sl]
 8003b06:	2b2a      	cmp	r3, #42	; 0x2a
 8003b08:	d015      	beq.n	8003b36 <_svfiprintf_r+0xf6>
 8003b0a:	9a07      	ldr	r2, [sp, #28]
 8003b0c:	4654      	mov	r4, sl
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f04f 0c0a 	mov.w	ip, #10
 8003b14:	4621      	mov	r1, r4
 8003b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b1a:	3b30      	subs	r3, #48	; 0x30
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	d94e      	bls.n	8003bbe <_svfiprintf_r+0x17e>
 8003b20:	b1b0      	cbz	r0, 8003b50 <_svfiprintf_r+0x110>
 8003b22:	9207      	str	r2, [sp, #28]
 8003b24:	e014      	b.n	8003b50 <_svfiprintf_r+0x110>
 8003b26:	eba0 0308 	sub.w	r3, r0, r8
 8003b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	9304      	str	r3, [sp, #16]
 8003b32:	46a2      	mov	sl, r4
 8003b34:	e7d2      	b.n	8003adc <_svfiprintf_r+0x9c>
 8003b36:	9b03      	ldr	r3, [sp, #12]
 8003b38:	1d19      	adds	r1, r3, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	9103      	str	r1, [sp, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bfbb      	ittet	lt
 8003b42:	425b      	neglt	r3, r3
 8003b44:	f042 0202 	orrlt.w	r2, r2, #2
 8003b48:	9307      	strge	r3, [sp, #28]
 8003b4a:	9307      	strlt	r3, [sp, #28]
 8003b4c:	bfb8      	it	lt
 8003b4e:	9204      	strlt	r2, [sp, #16]
 8003b50:	7823      	ldrb	r3, [r4, #0]
 8003b52:	2b2e      	cmp	r3, #46	; 0x2e
 8003b54:	d10c      	bne.n	8003b70 <_svfiprintf_r+0x130>
 8003b56:	7863      	ldrb	r3, [r4, #1]
 8003b58:	2b2a      	cmp	r3, #42	; 0x2a
 8003b5a:	d135      	bne.n	8003bc8 <_svfiprintf_r+0x188>
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	1d1a      	adds	r2, r3, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	9203      	str	r2, [sp, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bfb8      	it	lt
 8003b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b6c:	3402      	adds	r4, #2
 8003b6e:	9305      	str	r3, [sp, #20]
 8003b70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c3c <_svfiprintf_r+0x1fc>
 8003b74:	7821      	ldrb	r1, [r4, #0]
 8003b76:	2203      	movs	r2, #3
 8003b78:	4650      	mov	r0, sl
 8003b7a:	f7fc fb39 	bl	80001f0 <memchr>
 8003b7e:	b140      	cbz	r0, 8003b92 <_svfiprintf_r+0x152>
 8003b80:	2340      	movs	r3, #64	; 0x40
 8003b82:	eba0 000a 	sub.w	r0, r0, sl
 8003b86:	fa03 f000 	lsl.w	r0, r3, r0
 8003b8a:	9b04      	ldr	r3, [sp, #16]
 8003b8c:	4303      	orrs	r3, r0
 8003b8e:	3401      	adds	r4, #1
 8003b90:	9304      	str	r3, [sp, #16]
 8003b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b96:	4826      	ldr	r0, [pc, #152]	; (8003c30 <_svfiprintf_r+0x1f0>)
 8003b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b9c:	2206      	movs	r2, #6
 8003b9e:	f7fc fb27 	bl	80001f0 <memchr>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d038      	beq.n	8003c18 <_svfiprintf_r+0x1d8>
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <_svfiprintf_r+0x1f4>)
 8003ba8:	bb1b      	cbnz	r3, 8003bf2 <_svfiprintf_r+0x1b2>
 8003baa:	9b03      	ldr	r3, [sp, #12]
 8003bac:	3307      	adds	r3, #7
 8003bae:	f023 0307 	bic.w	r3, r3, #7
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	9303      	str	r3, [sp, #12]
 8003bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb8:	4433      	add	r3, r6
 8003bba:	9309      	str	r3, [sp, #36]	; 0x24
 8003bbc:	e767      	b.n	8003a8e <_svfiprintf_r+0x4e>
 8003bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	e7a5      	b.n	8003b14 <_svfiprintf_r+0xd4>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	3401      	adds	r4, #1
 8003bcc:	9305      	str	r3, [sp, #20]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f04f 0c0a 	mov.w	ip, #10
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bda:	3a30      	subs	r2, #48	; 0x30
 8003bdc:	2a09      	cmp	r2, #9
 8003bde:	d903      	bls.n	8003be8 <_svfiprintf_r+0x1a8>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0c5      	beq.n	8003b70 <_svfiprintf_r+0x130>
 8003be4:	9105      	str	r1, [sp, #20]
 8003be6:	e7c3      	b.n	8003b70 <_svfiprintf_r+0x130>
 8003be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bec:	4604      	mov	r4, r0
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e7f0      	b.n	8003bd4 <_svfiprintf_r+0x194>
 8003bf2:	ab03      	add	r3, sp, #12
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	462a      	mov	r2, r5
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <_svfiprintf_r+0x1f8>)
 8003bfa:	a904      	add	r1, sp, #16
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	f3af 8000 	nop.w
 8003c02:	1c42      	adds	r2, r0, #1
 8003c04:	4606      	mov	r6, r0
 8003c06:	d1d6      	bne.n	8003bb6 <_svfiprintf_r+0x176>
 8003c08:	89ab      	ldrh	r3, [r5, #12]
 8003c0a:	065b      	lsls	r3, r3, #25
 8003c0c:	f53f af2c 	bmi.w	8003a68 <_svfiprintf_r+0x28>
 8003c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c12:	b01d      	add	sp, #116	; 0x74
 8003c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c18:	ab03      	add	r3, sp, #12
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <_svfiprintf_r+0x1f8>)
 8003c20:	a904      	add	r1, sp, #16
 8003c22:	4638      	mov	r0, r7
 8003c24:	f000 f87a 	bl	8003d1c <_printf_i>
 8003c28:	e7eb      	b.n	8003c02 <_svfiprintf_r+0x1c2>
 8003c2a:	bf00      	nop
 8003c2c:	080042e4 	.word	0x080042e4
 8003c30:	080042ee 	.word	0x080042ee
 8003c34:	00000000 	.word	0x00000000
 8003c38:	08003989 	.word	0x08003989
 8003c3c:	080042ea 	.word	0x080042ea

08003c40 <_printf_common>:
 8003c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c44:	4616      	mov	r6, r2
 8003c46:	4699      	mov	r9, r3
 8003c48:	688a      	ldr	r2, [r1, #8]
 8003c4a:	690b      	ldr	r3, [r1, #16]
 8003c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c50:	4293      	cmp	r3, r2
 8003c52:	bfb8      	it	lt
 8003c54:	4613      	movlt	r3, r2
 8003c56:	6033      	str	r3, [r6, #0]
 8003c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c5c:	4607      	mov	r7, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	b10a      	cbz	r2, 8003c66 <_printf_common+0x26>
 8003c62:	3301      	adds	r3, #1
 8003c64:	6033      	str	r3, [r6, #0]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	0699      	lsls	r1, r3, #26
 8003c6a:	bf42      	ittt	mi
 8003c6c:	6833      	ldrmi	r3, [r6, #0]
 8003c6e:	3302      	addmi	r3, #2
 8003c70:	6033      	strmi	r3, [r6, #0]
 8003c72:	6825      	ldr	r5, [r4, #0]
 8003c74:	f015 0506 	ands.w	r5, r5, #6
 8003c78:	d106      	bne.n	8003c88 <_printf_common+0x48>
 8003c7a:	f104 0a19 	add.w	sl, r4, #25
 8003c7e:	68e3      	ldr	r3, [r4, #12]
 8003c80:	6832      	ldr	r2, [r6, #0]
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	42ab      	cmp	r3, r5
 8003c86:	dc26      	bgt.n	8003cd6 <_printf_common+0x96>
 8003c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c8c:	1e13      	subs	r3, r2, #0
 8003c8e:	6822      	ldr	r2, [r4, #0]
 8003c90:	bf18      	it	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	0692      	lsls	r2, r2, #26
 8003c96:	d42b      	bmi.n	8003cf0 <_printf_common+0xb0>
 8003c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	47c0      	blx	r8
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d01e      	beq.n	8003ce4 <_printf_common+0xa4>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	68e5      	ldr	r5, [r4, #12]
 8003caa:	6832      	ldr	r2, [r6, #0]
 8003cac:	f003 0306 	and.w	r3, r3, #6
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	bf08      	it	eq
 8003cb4:	1aad      	subeq	r5, r5, r2
 8003cb6:	68a3      	ldr	r3, [r4, #8]
 8003cb8:	6922      	ldr	r2, [r4, #16]
 8003cba:	bf0c      	ite	eq
 8003cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cc0:	2500      	movne	r5, #0
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	bfc4      	itt	gt
 8003cc6:	1a9b      	subgt	r3, r3, r2
 8003cc8:	18ed      	addgt	r5, r5, r3
 8003cca:	2600      	movs	r6, #0
 8003ccc:	341a      	adds	r4, #26
 8003cce:	42b5      	cmp	r5, r6
 8003cd0:	d11a      	bne.n	8003d08 <_printf_common+0xc8>
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	e008      	b.n	8003ce8 <_printf_common+0xa8>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	4652      	mov	r2, sl
 8003cda:	4649      	mov	r1, r9
 8003cdc:	4638      	mov	r0, r7
 8003cde:	47c0      	blx	r8
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d103      	bne.n	8003cec <_printf_common+0xac>
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cec:	3501      	adds	r5, #1
 8003cee:	e7c6      	b.n	8003c7e <_printf_common+0x3e>
 8003cf0:	18e1      	adds	r1, r4, r3
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	2030      	movs	r0, #48	; 0x30
 8003cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cfa:	4422      	add	r2, r4
 8003cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d04:	3302      	adds	r3, #2
 8003d06:	e7c7      	b.n	8003c98 <_printf_common+0x58>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	4638      	mov	r0, r7
 8003d10:	47c0      	blx	r8
 8003d12:	3001      	adds	r0, #1
 8003d14:	d0e6      	beq.n	8003ce4 <_printf_common+0xa4>
 8003d16:	3601      	adds	r6, #1
 8003d18:	e7d9      	b.n	8003cce <_printf_common+0x8e>
	...

08003d1c <_printf_i>:
 8003d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d20:	7e0f      	ldrb	r7, [r1, #24]
 8003d22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d24:	2f78      	cmp	r7, #120	; 0x78
 8003d26:	4691      	mov	r9, r2
 8003d28:	4680      	mov	r8, r0
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	469a      	mov	sl, r3
 8003d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d32:	d807      	bhi.n	8003d44 <_printf_i+0x28>
 8003d34:	2f62      	cmp	r7, #98	; 0x62
 8003d36:	d80a      	bhi.n	8003d4e <_printf_i+0x32>
 8003d38:	2f00      	cmp	r7, #0
 8003d3a:	f000 80d8 	beq.w	8003eee <_printf_i+0x1d2>
 8003d3e:	2f58      	cmp	r7, #88	; 0x58
 8003d40:	f000 80a3 	beq.w	8003e8a <_printf_i+0x16e>
 8003d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d4c:	e03a      	b.n	8003dc4 <_printf_i+0xa8>
 8003d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d52:	2b15      	cmp	r3, #21
 8003d54:	d8f6      	bhi.n	8003d44 <_printf_i+0x28>
 8003d56:	a101      	add	r1, pc, #4	; (adr r1, 8003d5c <_printf_i+0x40>)
 8003d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d5c:	08003db5 	.word	0x08003db5
 8003d60:	08003dc9 	.word	0x08003dc9
 8003d64:	08003d45 	.word	0x08003d45
 8003d68:	08003d45 	.word	0x08003d45
 8003d6c:	08003d45 	.word	0x08003d45
 8003d70:	08003d45 	.word	0x08003d45
 8003d74:	08003dc9 	.word	0x08003dc9
 8003d78:	08003d45 	.word	0x08003d45
 8003d7c:	08003d45 	.word	0x08003d45
 8003d80:	08003d45 	.word	0x08003d45
 8003d84:	08003d45 	.word	0x08003d45
 8003d88:	08003ed5 	.word	0x08003ed5
 8003d8c:	08003df9 	.word	0x08003df9
 8003d90:	08003eb7 	.word	0x08003eb7
 8003d94:	08003d45 	.word	0x08003d45
 8003d98:	08003d45 	.word	0x08003d45
 8003d9c:	08003ef7 	.word	0x08003ef7
 8003da0:	08003d45 	.word	0x08003d45
 8003da4:	08003df9 	.word	0x08003df9
 8003da8:	08003d45 	.word	0x08003d45
 8003dac:	08003d45 	.word	0x08003d45
 8003db0:	08003ebf 	.word	0x08003ebf
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	1d1a      	adds	r2, r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	602a      	str	r2, [r5, #0]
 8003dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0a3      	b.n	8003f10 <_printf_i+0x1f4>
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	6829      	ldr	r1, [r5, #0]
 8003dcc:	0606      	lsls	r6, r0, #24
 8003dce:	f101 0304 	add.w	r3, r1, #4
 8003dd2:	d50a      	bpl.n	8003dea <_printf_i+0xce>
 8003dd4:	680e      	ldr	r6, [r1, #0]
 8003dd6:	602b      	str	r3, [r5, #0]
 8003dd8:	2e00      	cmp	r6, #0
 8003dda:	da03      	bge.n	8003de4 <_printf_i+0xc8>
 8003ddc:	232d      	movs	r3, #45	; 0x2d
 8003dde:	4276      	negs	r6, r6
 8003de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de4:	485e      	ldr	r0, [pc, #376]	; (8003f60 <_printf_i+0x244>)
 8003de6:	230a      	movs	r3, #10
 8003de8:	e019      	b.n	8003e1e <_printf_i+0x102>
 8003dea:	680e      	ldr	r6, [r1, #0]
 8003dec:	602b      	str	r3, [r5, #0]
 8003dee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003df2:	bf18      	it	ne
 8003df4:	b236      	sxthne	r6, r6
 8003df6:	e7ef      	b.n	8003dd8 <_printf_i+0xbc>
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	6820      	ldr	r0, [r4, #0]
 8003dfc:	1d19      	adds	r1, r3, #4
 8003dfe:	6029      	str	r1, [r5, #0]
 8003e00:	0601      	lsls	r1, r0, #24
 8003e02:	d501      	bpl.n	8003e08 <_printf_i+0xec>
 8003e04:	681e      	ldr	r6, [r3, #0]
 8003e06:	e002      	b.n	8003e0e <_printf_i+0xf2>
 8003e08:	0646      	lsls	r6, r0, #25
 8003e0a:	d5fb      	bpl.n	8003e04 <_printf_i+0xe8>
 8003e0c:	881e      	ldrh	r6, [r3, #0]
 8003e0e:	4854      	ldr	r0, [pc, #336]	; (8003f60 <_printf_i+0x244>)
 8003e10:	2f6f      	cmp	r7, #111	; 0x6f
 8003e12:	bf0c      	ite	eq
 8003e14:	2308      	moveq	r3, #8
 8003e16:	230a      	movne	r3, #10
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e1e:	6865      	ldr	r5, [r4, #4]
 8003e20:	60a5      	str	r5, [r4, #8]
 8003e22:	2d00      	cmp	r5, #0
 8003e24:	bfa2      	ittt	ge
 8003e26:	6821      	ldrge	r1, [r4, #0]
 8003e28:	f021 0104 	bicge.w	r1, r1, #4
 8003e2c:	6021      	strge	r1, [r4, #0]
 8003e2e:	b90e      	cbnz	r6, 8003e34 <_printf_i+0x118>
 8003e30:	2d00      	cmp	r5, #0
 8003e32:	d04d      	beq.n	8003ed0 <_printf_i+0x1b4>
 8003e34:	4615      	mov	r5, r2
 8003e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e3e:	5dc7      	ldrb	r7, [r0, r7]
 8003e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e44:	4637      	mov	r7, r6
 8003e46:	42bb      	cmp	r3, r7
 8003e48:	460e      	mov	r6, r1
 8003e4a:	d9f4      	bls.n	8003e36 <_printf_i+0x11a>
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d10b      	bne.n	8003e68 <_printf_i+0x14c>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	07de      	lsls	r6, r3, #31
 8003e54:	d508      	bpl.n	8003e68 <_printf_i+0x14c>
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	6861      	ldr	r1, [r4, #4]
 8003e5a:	4299      	cmp	r1, r3
 8003e5c:	bfde      	ittt	le
 8003e5e:	2330      	movle	r3, #48	; 0x30
 8003e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e68:	1b52      	subs	r2, r2, r5
 8003e6a:	6122      	str	r2, [r4, #16]
 8003e6c:	f8cd a000 	str.w	sl, [sp]
 8003e70:	464b      	mov	r3, r9
 8003e72:	aa03      	add	r2, sp, #12
 8003e74:	4621      	mov	r1, r4
 8003e76:	4640      	mov	r0, r8
 8003e78:	f7ff fee2 	bl	8003c40 <_printf_common>
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d14c      	bne.n	8003f1a <_printf_i+0x1fe>
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	b004      	add	sp, #16
 8003e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8a:	4835      	ldr	r0, [pc, #212]	; (8003f60 <_printf_i+0x244>)
 8003e8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e90:	6829      	ldr	r1, [r5, #0]
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e98:	6029      	str	r1, [r5, #0]
 8003e9a:	061d      	lsls	r5, r3, #24
 8003e9c:	d514      	bpl.n	8003ec8 <_printf_i+0x1ac>
 8003e9e:	07df      	lsls	r7, r3, #31
 8003ea0:	bf44      	itt	mi
 8003ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ea6:	6023      	strmi	r3, [r4, #0]
 8003ea8:	b91e      	cbnz	r6, 8003eb2 <_printf_i+0x196>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	f023 0320 	bic.w	r3, r3, #32
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	2310      	movs	r3, #16
 8003eb4:	e7b0      	b.n	8003e18 <_printf_i+0xfc>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	f043 0320 	orr.w	r3, r3, #32
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	2378      	movs	r3, #120	; 0x78
 8003ec0:	4828      	ldr	r0, [pc, #160]	; (8003f64 <_printf_i+0x248>)
 8003ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ec6:	e7e3      	b.n	8003e90 <_printf_i+0x174>
 8003ec8:	0659      	lsls	r1, r3, #25
 8003eca:	bf48      	it	mi
 8003ecc:	b2b6      	uxthmi	r6, r6
 8003ece:	e7e6      	b.n	8003e9e <_printf_i+0x182>
 8003ed0:	4615      	mov	r5, r2
 8003ed2:	e7bb      	b.n	8003e4c <_printf_i+0x130>
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	6826      	ldr	r6, [r4, #0]
 8003ed8:	6961      	ldr	r1, [r4, #20]
 8003eda:	1d18      	adds	r0, r3, #4
 8003edc:	6028      	str	r0, [r5, #0]
 8003ede:	0635      	lsls	r5, r6, #24
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	d501      	bpl.n	8003ee8 <_printf_i+0x1cc>
 8003ee4:	6019      	str	r1, [r3, #0]
 8003ee6:	e002      	b.n	8003eee <_printf_i+0x1d2>
 8003ee8:	0670      	lsls	r0, r6, #25
 8003eea:	d5fb      	bpl.n	8003ee4 <_printf_i+0x1c8>
 8003eec:	8019      	strh	r1, [r3, #0]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	6123      	str	r3, [r4, #16]
 8003ef2:	4615      	mov	r5, r2
 8003ef4:	e7ba      	b.n	8003e6c <_printf_i+0x150>
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	1d1a      	adds	r2, r3, #4
 8003efa:	602a      	str	r2, [r5, #0]
 8003efc:	681d      	ldr	r5, [r3, #0]
 8003efe:	6862      	ldr	r2, [r4, #4]
 8003f00:	2100      	movs	r1, #0
 8003f02:	4628      	mov	r0, r5
 8003f04:	f7fc f974 	bl	80001f0 <memchr>
 8003f08:	b108      	cbz	r0, 8003f0e <_printf_i+0x1f2>
 8003f0a:	1b40      	subs	r0, r0, r5
 8003f0c:	6060      	str	r0, [r4, #4]
 8003f0e:	6863      	ldr	r3, [r4, #4]
 8003f10:	6123      	str	r3, [r4, #16]
 8003f12:	2300      	movs	r3, #0
 8003f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f18:	e7a8      	b.n	8003e6c <_printf_i+0x150>
 8003f1a:	6923      	ldr	r3, [r4, #16]
 8003f1c:	462a      	mov	r2, r5
 8003f1e:	4649      	mov	r1, r9
 8003f20:	4640      	mov	r0, r8
 8003f22:	47d0      	blx	sl
 8003f24:	3001      	adds	r0, #1
 8003f26:	d0ab      	beq.n	8003e80 <_printf_i+0x164>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	079b      	lsls	r3, r3, #30
 8003f2c:	d413      	bmi.n	8003f56 <_printf_i+0x23a>
 8003f2e:	68e0      	ldr	r0, [r4, #12]
 8003f30:	9b03      	ldr	r3, [sp, #12]
 8003f32:	4298      	cmp	r0, r3
 8003f34:	bfb8      	it	lt
 8003f36:	4618      	movlt	r0, r3
 8003f38:	e7a4      	b.n	8003e84 <_printf_i+0x168>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	4649      	mov	r1, r9
 8003f40:	4640      	mov	r0, r8
 8003f42:	47d0      	blx	sl
 8003f44:	3001      	adds	r0, #1
 8003f46:	d09b      	beq.n	8003e80 <_printf_i+0x164>
 8003f48:	3501      	adds	r5, #1
 8003f4a:	68e3      	ldr	r3, [r4, #12]
 8003f4c:	9903      	ldr	r1, [sp, #12]
 8003f4e:	1a5b      	subs	r3, r3, r1
 8003f50:	42ab      	cmp	r3, r5
 8003f52:	dcf2      	bgt.n	8003f3a <_printf_i+0x21e>
 8003f54:	e7eb      	b.n	8003f2e <_printf_i+0x212>
 8003f56:	2500      	movs	r5, #0
 8003f58:	f104 0619 	add.w	r6, r4, #25
 8003f5c:	e7f5      	b.n	8003f4a <_printf_i+0x22e>
 8003f5e:	bf00      	nop
 8003f60:	080042f5 	.word	0x080042f5
 8003f64:	08004306 	.word	0x08004306

08003f68 <memcpy>:
 8003f68:	440a      	add	r2, r1
 8003f6a:	4291      	cmp	r1, r2
 8003f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f70:	d100      	bne.n	8003f74 <memcpy+0xc>
 8003f72:	4770      	bx	lr
 8003f74:	b510      	push	{r4, lr}
 8003f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f7e:	4291      	cmp	r1, r2
 8003f80:	d1f9      	bne.n	8003f76 <memcpy+0xe>
 8003f82:	bd10      	pop	{r4, pc}

08003f84 <memmove>:
 8003f84:	4288      	cmp	r0, r1
 8003f86:	b510      	push	{r4, lr}
 8003f88:	eb01 0402 	add.w	r4, r1, r2
 8003f8c:	d902      	bls.n	8003f94 <memmove+0x10>
 8003f8e:	4284      	cmp	r4, r0
 8003f90:	4623      	mov	r3, r4
 8003f92:	d807      	bhi.n	8003fa4 <memmove+0x20>
 8003f94:	1e43      	subs	r3, r0, #1
 8003f96:	42a1      	cmp	r1, r4
 8003f98:	d008      	beq.n	8003fac <memmove+0x28>
 8003f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fa2:	e7f8      	b.n	8003f96 <memmove+0x12>
 8003fa4:	4402      	add	r2, r0
 8003fa6:	4601      	mov	r1, r0
 8003fa8:	428a      	cmp	r2, r1
 8003faa:	d100      	bne.n	8003fae <memmove+0x2a>
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fb6:	e7f7      	b.n	8003fa8 <memmove+0x24>

08003fb8 <_free_r>:
 8003fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d044      	beq.n	8004048 <_free_r+0x90>
 8003fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc2:	9001      	str	r0, [sp, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8003fca:	bfb8      	it	lt
 8003fcc:	18e4      	addlt	r4, r4, r3
 8003fce:	f000 f913 	bl	80041f8 <__malloc_lock>
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	; (800404c <_free_r+0x94>)
 8003fd4:	9801      	ldr	r0, [sp, #4]
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	b933      	cbnz	r3, 8003fe8 <_free_r+0x30>
 8003fda:	6063      	str	r3, [r4, #4]
 8003fdc:	6014      	str	r4, [r2, #0]
 8003fde:	b003      	add	sp, #12
 8003fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fe4:	f000 b90e 	b.w	8004204 <__malloc_unlock>
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	d908      	bls.n	8003ffe <_free_r+0x46>
 8003fec:	6825      	ldr	r5, [r4, #0]
 8003fee:	1961      	adds	r1, r4, r5
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	bf01      	itttt	eq
 8003ff4:	6819      	ldreq	r1, [r3, #0]
 8003ff6:	685b      	ldreq	r3, [r3, #4]
 8003ff8:	1949      	addeq	r1, r1, r5
 8003ffa:	6021      	streq	r1, [r4, #0]
 8003ffc:	e7ed      	b.n	8003fda <_free_r+0x22>
 8003ffe:	461a      	mov	r2, r3
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	b10b      	cbz	r3, 8004008 <_free_r+0x50>
 8004004:	42a3      	cmp	r3, r4
 8004006:	d9fa      	bls.n	8003ffe <_free_r+0x46>
 8004008:	6811      	ldr	r1, [r2, #0]
 800400a:	1855      	adds	r5, r2, r1
 800400c:	42a5      	cmp	r5, r4
 800400e:	d10b      	bne.n	8004028 <_free_r+0x70>
 8004010:	6824      	ldr	r4, [r4, #0]
 8004012:	4421      	add	r1, r4
 8004014:	1854      	adds	r4, r2, r1
 8004016:	42a3      	cmp	r3, r4
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	d1e0      	bne.n	8003fde <_free_r+0x26>
 800401c:	681c      	ldr	r4, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	6053      	str	r3, [r2, #4]
 8004022:	4421      	add	r1, r4
 8004024:	6011      	str	r1, [r2, #0]
 8004026:	e7da      	b.n	8003fde <_free_r+0x26>
 8004028:	d902      	bls.n	8004030 <_free_r+0x78>
 800402a:	230c      	movs	r3, #12
 800402c:	6003      	str	r3, [r0, #0]
 800402e:	e7d6      	b.n	8003fde <_free_r+0x26>
 8004030:	6825      	ldr	r5, [r4, #0]
 8004032:	1961      	adds	r1, r4, r5
 8004034:	428b      	cmp	r3, r1
 8004036:	bf04      	itt	eq
 8004038:	6819      	ldreq	r1, [r3, #0]
 800403a:	685b      	ldreq	r3, [r3, #4]
 800403c:	6063      	str	r3, [r4, #4]
 800403e:	bf04      	itt	eq
 8004040:	1949      	addeq	r1, r1, r5
 8004042:	6021      	streq	r1, [r4, #0]
 8004044:	6054      	str	r4, [r2, #4]
 8004046:	e7ca      	b.n	8003fde <_free_r+0x26>
 8004048:	b003      	add	sp, #12
 800404a:	bd30      	pop	{r4, r5, pc}
 800404c:	20000138 	.word	0x20000138

08004050 <sbrk_aligned>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	4e0e      	ldr	r6, [pc, #56]	; (800408c <sbrk_aligned+0x3c>)
 8004054:	460c      	mov	r4, r1
 8004056:	6831      	ldr	r1, [r6, #0]
 8004058:	4605      	mov	r5, r0
 800405a:	b911      	cbnz	r1, 8004062 <sbrk_aligned+0x12>
 800405c:	f000 f8bc 	bl	80041d8 <_sbrk_r>
 8004060:	6030      	str	r0, [r6, #0]
 8004062:	4621      	mov	r1, r4
 8004064:	4628      	mov	r0, r5
 8004066:	f000 f8b7 	bl	80041d8 <_sbrk_r>
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	d00a      	beq.n	8004084 <sbrk_aligned+0x34>
 800406e:	1cc4      	adds	r4, r0, #3
 8004070:	f024 0403 	bic.w	r4, r4, #3
 8004074:	42a0      	cmp	r0, r4
 8004076:	d007      	beq.n	8004088 <sbrk_aligned+0x38>
 8004078:	1a21      	subs	r1, r4, r0
 800407a:	4628      	mov	r0, r5
 800407c:	f000 f8ac 	bl	80041d8 <_sbrk_r>
 8004080:	3001      	adds	r0, #1
 8004082:	d101      	bne.n	8004088 <sbrk_aligned+0x38>
 8004084:	f04f 34ff 	mov.w	r4, #4294967295
 8004088:	4620      	mov	r0, r4
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	2000013c 	.word	0x2000013c

08004090 <_malloc_r>:
 8004090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004094:	1ccd      	adds	r5, r1, #3
 8004096:	f025 0503 	bic.w	r5, r5, #3
 800409a:	3508      	adds	r5, #8
 800409c:	2d0c      	cmp	r5, #12
 800409e:	bf38      	it	cc
 80040a0:	250c      	movcc	r5, #12
 80040a2:	2d00      	cmp	r5, #0
 80040a4:	4607      	mov	r7, r0
 80040a6:	db01      	blt.n	80040ac <_malloc_r+0x1c>
 80040a8:	42a9      	cmp	r1, r5
 80040aa:	d905      	bls.n	80040b8 <_malloc_r+0x28>
 80040ac:	230c      	movs	r3, #12
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	2600      	movs	r6, #0
 80040b2:	4630      	mov	r0, r6
 80040b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040b8:	4e2e      	ldr	r6, [pc, #184]	; (8004174 <_malloc_r+0xe4>)
 80040ba:	f000 f89d 	bl	80041f8 <__malloc_lock>
 80040be:	6833      	ldr	r3, [r6, #0]
 80040c0:	461c      	mov	r4, r3
 80040c2:	bb34      	cbnz	r4, 8004112 <_malloc_r+0x82>
 80040c4:	4629      	mov	r1, r5
 80040c6:	4638      	mov	r0, r7
 80040c8:	f7ff ffc2 	bl	8004050 <sbrk_aligned>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	4604      	mov	r4, r0
 80040d0:	d14d      	bne.n	800416e <_malloc_r+0xde>
 80040d2:	6834      	ldr	r4, [r6, #0]
 80040d4:	4626      	mov	r6, r4
 80040d6:	2e00      	cmp	r6, #0
 80040d8:	d140      	bne.n	800415c <_malloc_r+0xcc>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	4631      	mov	r1, r6
 80040de:	4638      	mov	r0, r7
 80040e0:	eb04 0803 	add.w	r8, r4, r3
 80040e4:	f000 f878 	bl	80041d8 <_sbrk_r>
 80040e8:	4580      	cmp	r8, r0
 80040ea:	d13a      	bne.n	8004162 <_malloc_r+0xd2>
 80040ec:	6821      	ldr	r1, [r4, #0]
 80040ee:	3503      	adds	r5, #3
 80040f0:	1a6d      	subs	r5, r5, r1
 80040f2:	f025 0503 	bic.w	r5, r5, #3
 80040f6:	3508      	adds	r5, #8
 80040f8:	2d0c      	cmp	r5, #12
 80040fa:	bf38      	it	cc
 80040fc:	250c      	movcc	r5, #12
 80040fe:	4629      	mov	r1, r5
 8004100:	4638      	mov	r0, r7
 8004102:	f7ff ffa5 	bl	8004050 <sbrk_aligned>
 8004106:	3001      	adds	r0, #1
 8004108:	d02b      	beq.n	8004162 <_malloc_r+0xd2>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	442b      	add	r3, r5
 800410e:	6023      	str	r3, [r4, #0]
 8004110:	e00e      	b.n	8004130 <_malloc_r+0xa0>
 8004112:	6822      	ldr	r2, [r4, #0]
 8004114:	1b52      	subs	r2, r2, r5
 8004116:	d41e      	bmi.n	8004156 <_malloc_r+0xc6>
 8004118:	2a0b      	cmp	r2, #11
 800411a:	d916      	bls.n	800414a <_malloc_r+0xba>
 800411c:	1961      	adds	r1, r4, r5
 800411e:	42a3      	cmp	r3, r4
 8004120:	6025      	str	r5, [r4, #0]
 8004122:	bf18      	it	ne
 8004124:	6059      	strne	r1, [r3, #4]
 8004126:	6863      	ldr	r3, [r4, #4]
 8004128:	bf08      	it	eq
 800412a:	6031      	streq	r1, [r6, #0]
 800412c:	5162      	str	r2, [r4, r5]
 800412e:	604b      	str	r3, [r1, #4]
 8004130:	4638      	mov	r0, r7
 8004132:	f104 060b 	add.w	r6, r4, #11
 8004136:	f000 f865 	bl	8004204 <__malloc_unlock>
 800413a:	f026 0607 	bic.w	r6, r6, #7
 800413e:	1d23      	adds	r3, r4, #4
 8004140:	1af2      	subs	r2, r6, r3
 8004142:	d0b6      	beq.n	80040b2 <_malloc_r+0x22>
 8004144:	1b9b      	subs	r3, r3, r6
 8004146:	50a3      	str	r3, [r4, r2]
 8004148:	e7b3      	b.n	80040b2 <_malloc_r+0x22>
 800414a:	6862      	ldr	r2, [r4, #4]
 800414c:	42a3      	cmp	r3, r4
 800414e:	bf0c      	ite	eq
 8004150:	6032      	streq	r2, [r6, #0]
 8004152:	605a      	strne	r2, [r3, #4]
 8004154:	e7ec      	b.n	8004130 <_malloc_r+0xa0>
 8004156:	4623      	mov	r3, r4
 8004158:	6864      	ldr	r4, [r4, #4]
 800415a:	e7b2      	b.n	80040c2 <_malloc_r+0x32>
 800415c:	4634      	mov	r4, r6
 800415e:	6876      	ldr	r6, [r6, #4]
 8004160:	e7b9      	b.n	80040d6 <_malloc_r+0x46>
 8004162:	230c      	movs	r3, #12
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4638      	mov	r0, r7
 8004168:	f000 f84c 	bl	8004204 <__malloc_unlock>
 800416c:	e7a1      	b.n	80040b2 <_malloc_r+0x22>
 800416e:	6025      	str	r5, [r4, #0]
 8004170:	e7de      	b.n	8004130 <_malloc_r+0xa0>
 8004172:	bf00      	nop
 8004174:	20000138 	.word	0x20000138

08004178 <_realloc_r>:
 8004178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417c:	4680      	mov	r8, r0
 800417e:	4614      	mov	r4, r2
 8004180:	460e      	mov	r6, r1
 8004182:	b921      	cbnz	r1, 800418e <_realloc_r+0x16>
 8004184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004188:	4611      	mov	r1, r2
 800418a:	f7ff bf81 	b.w	8004090 <_malloc_r>
 800418e:	b92a      	cbnz	r2, 800419c <_realloc_r+0x24>
 8004190:	f7ff ff12 	bl	8003fb8 <_free_r>
 8004194:	4625      	mov	r5, r4
 8004196:	4628      	mov	r0, r5
 8004198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800419c:	f000 f838 	bl	8004210 <_malloc_usable_size_r>
 80041a0:	4284      	cmp	r4, r0
 80041a2:	4607      	mov	r7, r0
 80041a4:	d802      	bhi.n	80041ac <_realloc_r+0x34>
 80041a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041aa:	d812      	bhi.n	80041d2 <_realloc_r+0x5a>
 80041ac:	4621      	mov	r1, r4
 80041ae:	4640      	mov	r0, r8
 80041b0:	f7ff ff6e 	bl	8004090 <_malloc_r>
 80041b4:	4605      	mov	r5, r0
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d0ed      	beq.n	8004196 <_realloc_r+0x1e>
 80041ba:	42bc      	cmp	r4, r7
 80041bc:	4622      	mov	r2, r4
 80041be:	4631      	mov	r1, r6
 80041c0:	bf28      	it	cs
 80041c2:	463a      	movcs	r2, r7
 80041c4:	f7ff fed0 	bl	8003f68 <memcpy>
 80041c8:	4631      	mov	r1, r6
 80041ca:	4640      	mov	r0, r8
 80041cc:	f7ff fef4 	bl	8003fb8 <_free_r>
 80041d0:	e7e1      	b.n	8004196 <_realloc_r+0x1e>
 80041d2:	4635      	mov	r5, r6
 80041d4:	e7df      	b.n	8004196 <_realloc_r+0x1e>
	...

080041d8 <_sbrk_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d06      	ldr	r5, [pc, #24]	; (80041f4 <_sbrk_r+0x1c>)
 80041dc:	2300      	movs	r3, #0
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	f7fd ff22 	bl	800202c <_sbrk>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d102      	bne.n	80041f2 <_sbrk_r+0x1a>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	b103      	cbz	r3, 80041f2 <_sbrk_r+0x1a>
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
 80041f4:	20000140 	.word	0x20000140

080041f8 <__malloc_lock>:
 80041f8:	4801      	ldr	r0, [pc, #4]	; (8004200 <__malloc_lock+0x8>)
 80041fa:	f000 b811 	b.w	8004220 <__retarget_lock_acquire_recursive>
 80041fe:	bf00      	nop
 8004200:	20000144 	.word	0x20000144

08004204 <__malloc_unlock>:
 8004204:	4801      	ldr	r0, [pc, #4]	; (800420c <__malloc_unlock+0x8>)
 8004206:	f000 b80c 	b.w	8004222 <__retarget_lock_release_recursive>
 800420a:	bf00      	nop
 800420c:	20000144 	.word	0x20000144

08004210 <_malloc_usable_size_r>:
 8004210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004214:	1f18      	subs	r0, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	bfbc      	itt	lt
 800421a:	580b      	ldrlt	r3, [r1, r0]
 800421c:	18c0      	addlt	r0, r0, r3
 800421e:	4770      	bx	lr

08004220 <__retarget_lock_acquire_recursive>:
 8004220:	4770      	bx	lr

08004222 <__retarget_lock_release_recursive>:
 8004222:	4770      	bx	lr

08004224 <_init>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr

08004230 <_fini>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr
